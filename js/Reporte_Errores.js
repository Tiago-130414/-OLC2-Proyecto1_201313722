/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Reporte_Errores = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[1,36],$V3=[1,9],$V4=[1,10],$V5=[1,33],$V6=[1,34],$V7=[1,35],$V8=[1,39],$V9=[1,28],$Va=[1,29],$Vb=[1,30],$Vc=[1,31],$Vd=[1,32],$Ve=[1,25],$Vf=[1,26],$Vg=[1,37],$Vh=[2,5,10,11,20,24,41,42,43,47,48,55,59,60,61,64,65,94],$Vi=[2,5,10,11,17,20,24,41,42,43,47,48,53,54,55,59,60,61,64,65,94],$Vj=[1,55],$Vk=[2,5,10,11,17,20,24,41,42,43,45,47,48,53,54,55,59,60,61,64,65,94],$Vl=[1,75],$Vm=[1,76],$Vn=[1,68],$Vo=[1,67],$Vp=[1,69],$Vq=[1,70],$Vr=[1,71],$Vs=[1,72],$Vt=[1,73],$Vu=[1,74],$Vv=[1,77],$Vw=[2,152],$Vx=[1,80],$Vy=[14,17,18,21,23,56,64,65,77,80,106,107,108,109,110,111,112,113,114,115,116,117,118,119],$Vz=[23,77],$VA=[2,101],$VB=[1,85],$VC=[1,87],$VD=[1,95],$VE=[1,94],$VF=[2,79],$VG=[1,99],$VH=[1,105],$VI=[1,114],$VJ=[2,14],$VK=[1,115],$VL=[1,116],$VM=[1,124],$VN=[1,125],$VO=[1,126],$VP=[1,127],$VQ=[1,128],$VR=[1,129],$VS=[1,130],$VT=[1,131],$VU=[1,132],$VV=[1,133],$VW=[1,134],$VX=[1,135],$VY=[1,136],$VZ=[1,137],$V_=[14,17,18,23,77,80,106,107,108,109,110,111,112,113,114,115,116,117,118,119],$V$=[14,17,18,23,64,65,77,80,106,107,108,109,110,111,112,113,114,115,116,117,118,119],$V01=[14,77],$V11=[1,155],$V21=[2,122],$V31=[1,159],$V41=[1,158],$V51=[1,165],$V61=[1,161],$V71=[1,162],$V81=[1,163],$V91=[1,164],$Va1=[1,167],$Vb1=[14,17,23,77],$Vc1=[1,176],$Vd1=[1,175],$Ve1=[2,91],$Vf1=[1,179],$Vg1=[17,53,54],$Vh1=[2,11,17,20,24,41,42,43,47,48,53,54,55,59,60,61,64,65,94],$Vi1=[14,15,17,21,23,77,78],$Vj1=[2,146],$Vk1=[77,80],$Vl1=[1,248],$Vm1=[1,247],$Vn1=[17,23,77],$Vo1=[11,12,64,65,115,121,122,123,124,125,127],$Vp1=[14,17,18,23,77,80,106,107],$Vq1=[14,17,18,23,77,80,106,107,108,109,110,111,112,113],$Vr1=[14,17,18,23,77,80,106,107,108,109,110,111,112,113,114,115],$Vs1=[14,17,18,23,77,80,106,107,108,109,110,111,112,113,114,115,116,117],$Vt1=[1,281],$Vu1=[17,54],$Vv1=[1,306],$Vw1=[2,148],$Vx1=[1,367];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CONT":4,"EOF":5,"LISTA_CONTENIDO":6,"CONTENIDO":7,"FUNCIONES":8,"ESTRUCTURAS_DE_CONTROL":9,"R_Funcion":10,"Identificador":11,"S_ParentesisAbre":12,"PARAM":13,"S_ParentesisCierra":14,"S_LlaveAbre":15,"EDD":16,"S_LlaveCierra":17,"S_DosPuntos":18,"TIPOS_DE_DATO":19,"R_Let":20,"S_Igual":21,"TIPAR_FUNCION":22,"S_PuntoComa":23,"R_Const":24,"LISTADO_ESTRUCTURAS":25,"CONT_ESTRUCTURAS_CONTROL":26,"VARIABLES":27,"ASIGNACION":28,"LISTADO_IF":29,"ELSE":30,"SWITCH":31,"IMPRIMIR":32,"WHILE":33,"DO_WHILE":34,"FOR":35,"FOR_OF":36,"FOR_IN":37,"SENTENCIAS_TRANSFERENCIA":38,"LLAMADA_FUNC":39,"TYPES":40,"R_Break":41,"R_Continue":42,"R_Return":43,"EXPRESION_G":44,"R_Else":45,"IF":46,"R_If":47,"R_Switch":48,"CASE":49,"DEFINIR_DEFAULT":50,"LISTA_CASE":51,"DEFINIR_CASE":52,"R_Case":53,"R_Default":54,"R_Console":55,"S_Punto":56,"R_Log":57,"FUNC":58,"R_While":59,"R_Do":60,"R_For":61,"CONT_FOR":62,"FIN_FOR":63,"OP_Incremento":64,"OP_Decremento":65,"IdentificadorG":66,"CONT_FOR_IN":67,"R_In":68,"CONT_FOR_OF":69,"R_Of":70,"ATRIBUTOS":71,"LISTA_DE_ASIGNACIONES":72,"COMPLETAR_ASIGNACION":73,"R_Push":74,"LISTADO_ASIGNACION":75,"CONTENIDO_ASIGNACION":76,"S_Coma":77,"S_CorcheteAbre":78,"CONT_ASIG_ARRAY":79,"S_CorcheteCierra":80,"LISTA_DECLARACION_TYPES":81,"LISTA_ASIGN_ARRAY":82,"CONT_ARRAY_ASIGN_VV":83,"LISTADO_VAR":84,"CONT_VAR":85,"CONTENIDO_ARRAY":86,"LISTADO_ARRAY":87,"CONT_ARR":88,"PARAMETROS_FUNC":89,"R_Pop":90,"LISTA_PARAMETROS":91,"PARAMETROS":92,"S_Interrogacion":93,"T_Type":94,"LISTA_TYPES":95,"FIN_TYPES":96,"SEPARADOR":97,"CONTENIDO_TYPES":98,"SEPARADOR_DECLARACION_TYPES":99,"CONTENIDO_DECLARACION_TYPES":100,"T_Number":101,"T_Boolean":102,"T_String":103,"T_Void":104,"CONT_ATRIBUTOS":105,"LOG_Concatenar":106,"LOG_OR":107,"REL_IgualIgual":108,"REL_MayorIgualQue":109,"REL_MayorQue":110,"REL_MenorIgualQue":111,"REL_MenorQue":112,"REL_Distinto":113,"OP_Mas":114,"OP_Menos":115,"OP_Multiplicacion":116,"OP_Division":117,"OP_Exponenciacion":118,"OP_Modulo":119,"CONTENIDO_EXPRESION":120,"LOG_Not":121,"Entero":122,"Decimal":123,"R_True":124,"R_False":125,"OPCIONAL":126,"Cadena":127,"R_Length":128,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"R_Funcion",11:"Identificador",12:"S_ParentesisAbre",14:"S_ParentesisCierra",15:"S_LlaveAbre",17:"S_LlaveCierra",18:"S_DosPuntos",20:"R_Let",21:"S_Igual",23:"S_PuntoComa",24:"R_Const",41:"R_Break",42:"R_Continue",43:"R_Return",45:"R_Else",47:"R_If",48:"R_Switch",53:"R_Case",54:"R_Default",55:"R_Console",56:"S_Punto",57:"R_Log",59:"R_While",60:"R_Do",61:"R_For",64:"OP_Incremento",65:"OP_Decremento",66:"IdentificadorG",68:"R_In",70:"R_Of",74:"R_Push",77:"S_Coma",78:"S_CorcheteAbre",80:"S_CorcheteCierra",90:"R_Pop",93:"S_Interrogacion",94:"T_Type",101:"T_Number",102:"T_Boolean",103:"T_String",104:"T_Void",106:"LOG_Concatenar",107:"LOG_OR",108:"REL_IgualIgual",109:"REL_MayorIgualQue",110:"REL_MayorQue",111:"REL_MenorIgualQue",112:"REL_MenorQue",113:"REL_Distinto",114:"OP_Mas",115:"OP_Menos",116:"OP_Multiplicacion",117:"OP_Division",118:"OP_Exponenciacion",119:"OP_Modulo",121:"LOG_Not",122:"Entero",123:"Decimal",124:"R_True",125:"R_False",127:"Cadena",128:"R_Length"},
productions_: [0,[3,2],[4,1],[4,0],[6,2],[6,1],[7,1],[7,1],[7,1],[8,8],[8,10],[8,12],[8,12],[16,1],[16,0],[25,2],[25,1],[26,1],[26,1],[9,1],[9,1],[9,2],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[38,2],[38,2],[38,2],[38,3],[29,3],[29,1],[46,7],[30,4],[30,0],[31,8],[49,1],[49,0],[51,2],[51,1],[52,4],[50,3],[50,0],[32,7],[58,1],[58,0],[33,7],[34,9],[35,10],[62,7],[62,5],[62,2],[62,4],[63,3],[63,2],[63,2],[63,2],[63,2],[37,7],[67,4],[67,4],[67,3],[36,7],[69,4],[69,4],[69,3],[28,4],[28,4],[28,4],[28,4],[28,4],[28,7],[73,1],[73,0],[75,2],[75,1],[76,4],[76,3],[76,3],[76,3],[76,3],[72,1],[72,3],[72,3],[79,1],[79,0],[82,3],[82,1],[83,1],[83,3],[83,3],[27,3],[27,3],[84,3],[84,1],[85,1],[85,3],[85,5],[85,3],[85,5],[85,5],[85,9],[85,7],[85,5],[86,1],[86,0],[87,3],[87,1],[88,3],[88,1],[39,5],[39,6],[89,3],[89,1],[89,0],[13,1],[13,0],[91,3],[91,1],[92,3],[92,5],[92,4],[40,6],[95,3],[95,1],[98,3],[98,5],[97,1],[97,1],[96,2],[96,1],[81,3],[81,1],[100,3],[99,1],[99,1],[19,1],[19,1],[19,1],[19,1],[19,1],[22,2],[22,0],[71,3],[71,1],[105,4],[105,1],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,2],[44,2],[44,2],[44,2],[44,2],[44,2],[44,1],[120,1],[120,1],[120,1],[120,1],[120,3],[120,4],[120,3],[120,1],[120,1],[120,3],[120,5],[126,3],[126,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return tablaErrores;
break;
case 4:
this.$ = $$[$0-1] + $$[$0]
break;
case 5: case 124:
this.$=$$[$0]
break;
case 8: case 18:
this.$ ='';tablaErrores.push({ Tipo_Error  : ' Error_Sintactico ', Error  : yytext , Fila  : this._$.first_line , Columna  :  this._$.first_column });
break;
case 9:
this.$ = $$[$0-7] + $$[$0-6] +$$[$0-5] +$$[$0-4] +$$[$0-3] +$$[$0-2] 
break;
case 10:
this.$ = $$[$0-9] + $$[$0-8] +$$[$0-7] +$$[$0-6] +$$[$0-5] +$$[$0-4] 
break;
case 11:
this.$ = $$[$0-11] + $$[$0-10] +$$[$0-9] +$$[$0-8] +$$[$0-7] +$$[$0-6] +$$[$0-5]+$$[$0-4]+$$[$0-3]
break;
case 54:
 this.$ = $$[$0-9] + $$[$0-8] + $$[$0-7] + $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 59: case 153: case 154: case 155: case 156: case 157: case 158: case 159: case 160: case 161: case 162: case 163: case 164: case 165: case 166: case 178: case 180: case 185:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 116:
this.$ = $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 117:
this.$ = $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1];
break;
case 118:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 120:
this.$='';
break;
case 123:
this.$ = $$[$0-2] + $$[$0-1]
break;
case 125:
this.$ = $$[$0-2] + $$[$0-1] +$$[$0]
break;
case 126:
this.$ = $$[$0-4] + $$[$0-3] +$$[$0-2] +$$[$0-1]
break;
case 127:
this.$ = $$[$0-3] + $$[$0-2] +$$[$0-1] +$$[$0]
break;
case 167: case 168: case 171: case 172:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 169: case 170:
 this.$ = $$[$0-1] + $$[$0];
break;
case 179:
 this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
}
},
table: [{2:$V0,3:1,4:2,5:[2,3],6:3,7:4,8:5,9:6,10:$V1,11:$V2,20:$V3,24:$V4,27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,41:$V5,42:$V6,43:$V7,46:27,47:$V8,48:$V9,55:$Va,59:$Vb,60:$Vc,61:$Vd,64:$Ve,65:$Vf,71:24,94:$Vg,105:38},{1:[3]},{5:[1,40]},{2:$V0,5:[2,2],7:41,8:5,9:6,10:$V1,11:$V2,20:$V3,24:$V4,27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,41:$V5,42:$V6,43:$V7,46:27,47:$V8,48:$V9,55:$Va,59:$Vb,60:$Vc,61:$Vd,64:$Ve,65:$Vf,71:24,94:$Vg,105:38},o($Vh,[2,5]),o($Vh,[2,6]),o($Vh,[2,7]),o($Vh,[2,8]),{11:[1,42]},{11:[1,43],84:44,85:45},{11:[1,46],84:47,85:45},o($Vi,[2,19]),o($Vi,[2,20]),o($Vi,[2,40],{30:48,45:[1,49]}),o($Vi,[2,22]),o($Vi,[2,23]),o($Vi,[2,24]),o($Vi,[2,25]),o($Vi,[2,26]),o($Vi,[2,27]),o($Vi,[2,28]),o($Vi,[2,29]),o($Vi,[2,30]),o($Vi,[2,31]),{21:[1,50],56:[1,53],64:[1,51],65:[1,52]},{11:$Vj,71:54,105:38},{11:$Vj,71:56,105:38},o($Vk,[2,37]),{12:[1,57]},{56:[1,58]},{12:[1,59]},{15:[1,60]},{12:[1,61]},{23:[1,62]},{23:[1,63]},{11:$Vl,12:$Vm,23:[1,64],44:65,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},o([21,56,64,65],$Vw,{12:[1,79],78:$Vx}),{11:[1,81]},o($Vy,[2,150]),{12:[1,82]},{1:[2,1]},o($Vh,[2,4]),{12:[1,83]},o($Vz,$VA,{18:$VB,21:[1,84]}),{23:[1,86],77:$VC},o($Vz,[2,100]),o($Vz,$VA,{18:$VB,21:[1,88]}),{23:[1,89],77:$VC},o($Vi,[2,21]),{15:[1,91],46:90,47:$V8},{11:$Vl,12:$Vm,15:$VD,44:93,64:$Vn,65:$Vo,71:78,72:92,78:$VE,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{23:$VF,73:96,75:97,76:98,77:$VG},{23:$VF,73:100,75:97,76:98,77:$VG},{11:$Vj,74:[1,101],90:[1,102],105:103},{23:$VF,56:$VH,73:104,75:97,76:98,77:$VG},o($Vy,$Vw,{78:$Vx}),{23:$VF,56:$VH,73:106,75:97,76:98,77:$VG},{11:$Vl,12:$Vm,44:107,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{57:[1,108]},{11:$Vl,12:$Vm,44:109,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{2:$VI,9:113,11:$V2,16:110,17:$VJ,20:$VK,24:$VL,25:111,26:112,27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,41:$V5,42:$V6,43:$V7,46:27,47:$V8,48:$V9,55:$Va,59:$Vb,60:$Vc,61:$Vd,64:$Ve,65:$Vf,71:24,94:$Vg,105:38},{11:[1,121],20:[1,120],24:[1,122],62:117,67:119,69:118},o($Vi,[2,32]),o($Vi,[2,33]),o($Vi,[2,34]),{23:[1,123],106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ},o($V_,[2,173],{64:[1,139],65:[1,138]}),{11:$Vl,12:$Vm,71:78,105:38,120:140,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{11:$Vl,12:$Vm,71:78,105:38,120:141,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{11:$Vl,12:$Vm,71:78,105:38,120:142,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{11:$Vl,12:$Vm,71:78,105:38,120:143,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},o($V$,[2,174]),o($V$,[2,175]),o($V$,[2,176]),o($V$,[2,177]),o([14,17,18,23,56,64,65,77,80,106,107,108,109,110,111,112,113,114,115,116,117,118,119],$Vw,{12:[1,144],78:$Vx}),{11:$Vl,12:$Vm,44:145,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},o($V$,[2,181]),o($V$,[2,182],{56:[1,146]}),o($V01,[2,120],{105:38,120:66,71:78,89:147,44:148,11:$Vl,12:$Vm,64:$Vn,65:$Vo,115:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv}),{11:$Vl,12:$Vm,44:149,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{21:[1,150]},{11:$Vl,12:$Vm,44:151,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{11:$V11,13:152,14:$V21,91:153,92:154},{10:[1,156],11:$Vl,12:$Vm,15:$V31,44:157,64:$Vn,65:$Vo,71:78,78:$V41,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{11:$V51,19:160,101:$V61,102:$V71,103:$V81,104:$V91},o($Vi,[2,97]),{11:$Va1,85:166},{10:[1,168],11:$Vl,12:$Vm,15:$V31,44:157,64:$Vn,65:$Vo,71:78,78:$V41,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},o($Vi,[2,98]),o($Vk,[2,36]),{2:$VI,9:113,11:$V2,16:169,17:$VJ,20:$VK,24:$VL,25:111,26:112,27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,41:$V5,42:$V6,43:$V7,46:27,47:$V8,48:$V9,55:$Va,59:$Vb,60:$Vc,61:$Vd,64:$Ve,65:$Vf,71:24,94:$Vg,105:38},{23:[1,170]},o($Vb1,[2,87],{106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ}),{11:$Vl,12:$Vm,15:$Vc1,44:174,64:$Vn,65:$Vo,71:78,78:$Vd1,79:171,80:$Ve1,82:172,83:173,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{11:$Vf1,81:177,100:178},{23:[1,180]},{23:[2,78],76:181,77:$VG},o($Vz,[2,81]),{11:[1,182],64:[1,183],65:[1,184]},{23:[1,185]},{12:[1,186]},{12:[1,187]},o($Vy,[2,149]),{23:[1,188]},{11:$Vj,105:103},{23:[1,189]},{14:[1,190],106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ},{12:[1,191]},{14:[1,192],106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ},{17:[1,193]},o($Vg1,[2,13],{27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,71:24,46:27,105:38,9:113,26:194,2:$VI,11:$V2,20:$VK,24:$VL,41:$V5,42:$V6,43:$V7,47:$V8,48:$V9,55:$Va,59:$Vb,60:$Vc,61:$Vd,64:$Ve,65:$Vf,94:$Vg}),o($Vh1,[2,16]),o($Vh1,[2,17]),o($Vh1,[2,18]),{11:$Va1,84:44,85:45},{11:$Va1,84:47,85:45},{11:$Vl,12:$Vm,44:195,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{14:[1,196]},{14:[1,197]},{11:[1,198]},{21:[1,200],23:[1,199],68:[1,202],70:[1,201]},{11:[1,203]},o($Vi,[2,35]),{11:$Vl,12:$Vm,44:204,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{11:$Vl,12:$Vm,44:205,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{11:$Vl,12:$Vm,44:206,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{11:$Vl,12:$Vm,44:207,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{11:$Vl,12:$Vm,44:208,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{11:$Vl,12:$Vm,44:209,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{11:$Vl,12:$Vm,44:210,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{11:$Vl,12:$Vm,44:211,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{11:$Vl,12:$Vm,44:212,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{11:$Vl,12:$Vm,44:213,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{11:$Vl,12:$Vm,44:214,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{11:$Vl,12:$Vm,44:215,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{11:$Vl,12:$Vm,44:216,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{11:$Vl,12:$Vm,44:217,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},o($V_,[2,167]),o($V_,[2,168]),o($V_,[2,169]),o($V_,[2,170]),o($V_,[2,171]),o($V_,[2,172]),{11:$Vl,12:$Vm,14:[1,218],44:220,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:219,127:$Vv},{14:[1,221],106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ},{11:$Vj,90:[1,223],105:103,128:[1,222]},{14:[1,224],77:[1,225]},o($V01,[2,119],{106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ}),{80:[1,226],106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ},{15:[1,227]},{14:[1,228],106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ},{14:[1,229]},{14:[2,121],77:[1,230]},o($V01,[2,124]),{18:[1,231],93:[1,232]},{12:[1,233]},o($Vz,[2,104],{106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ}),{11:$Vl,12:$Vm,15:$Vc1,44:174,64:$Vn,65:$Vo,71:78,78:$Vd1,79:234,80:$Ve1,82:172,83:173,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{11:$Vf1,81:235,100:178},o($Vz,[2,102],{21:[1,236],78:[1,237]}),o($Vi1,[2,142]),o($Vi1,[2,143]),o($Vi1,[2,144]),o($Vi1,[2,145]),o([14,15,21,23,77,78],$Vj1),o($Vz,[2,99]),o($Vz,$VA,{18:$VB,21:[1,238]}),{12:[1,239]},{17:[1,240]},o($Vi,[2,72]),{80:[1,241]},{77:[1,242],80:[2,90]},o($Vk1,[2,93]),o($Vk1,[2,94],{106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ}),{11:$Vl,12:$Vm,15:$Vc1,44:174,64:$Vn,65:$Vo,71:78,78:$Vd1,79:243,80:$Ve1,82:172,83:173,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{11:$Vf1,81:244,100:178},{17:[1,245],23:$Vl1,77:$Vm1,99:246},o($Vn1,[2,138]),{18:[1,249]},o($Vi,[2,73]),o($Vz,[2,80]),{21:[1,250],64:[1,251],65:[1,252]},{11:[1,253]},{11:[1,254]},o($Vi,[2,75]),{11:$Vl,12:$Vm,15:$VD,44:93,64:$Vn,65:$Vo,71:78,72:255,78:$VE,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{14:[1,256]},o($Vi,[2,74]),o($Vi,[2,76]),{15:[1,257]},{11:$Vl,12:$Vm,14:[2,51],44:259,58:258,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{15:[1,260]},{59:[1,261]},o($Vh1,[2,15]),{23:[1,262],106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ},{15:[1,263]},{15:[1,264]},{18:[1,265],21:[1,266],68:[1,268],70:[1,267]},o($Vo1,[2,57]),{11:$Vl,12:$Vm,44:269,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{11:[1,270]},{11:[1,271]},{68:[1,273],70:[1,272]},o($Vp1,[2,153],{108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ}),o($Vp1,[2,154],{108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ}),o($Vq1,[2,155],{114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ}),o($Vq1,[2,156],{114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ}),o($Vq1,[2,157],{114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ}),o($Vq1,[2,158],{114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ}),o($Vq1,[2,159],{114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ}),o($Vq1,[2,160],{114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ}),o($Vr1,[2,161],{116:$VW,117:$VX,118:$VY,119:$VZ}),o($Vr1,[2,162],{116:$VW,117:$VX,118:$VY,119:$VZ}),o($Vs1,[2,163],{118:$VY,119:$VZ}),o($Vs1,[2,164],{118:$VY,119:$VZ}),o($V_,[2,165]),o($V_,[2,166]),o($V$,[2,178]),{14:[1,274],77:[1,275]},o($V01,[2,186],{106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ}),o($V$,[2,180]),o($V$,[2,183]),{12:[1,276]},{23:[1,277]},{11:$Vl,12:$Vm,44:278,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},o($Vy,[2,151]),{11:$Vt1,95:279,98:280},{15:[1,282]},{15:[1,283],18:[1,284]},{11:$V11,92:285},{11:$V51,19:286,101:$V61,102:$V71,103:$V81,104:$V91},{18:[1,287]},{11:$V11,13:288,14:$V21,91:153,92:154},{80:[1,289]},{17:[1,290],23:$Vl1,77:$Vm1,99:246},{11:$Vl,12:$Vm,15:[1,292],44:291,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{80:[1,293]},{11:$Vl,12:$Vm,15:$V31,44:157,64:$Vn,65:$Vo,71:78,78:$V41,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{11:$V11,13:294,14:$V21,91:153,92:154},o($Vi,[2,39]),o($Vb1,[2,88]),{11:$Vl,12:$Vm,15:$Vc1,44:174,64:$Vn,65:$Vo,71:78,78:$Vd1,83:295,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{80:[1,296]},{17:[1,297],23:$Vl1,77:$Vm1,99:246},o($Vb1,[2,89]),{11:$Vf1,100:298},{11:[2,140]},{11:[2,141]},{11:$Vl,12:$Vm,15:$VD,44:93,64:$Vn,65:$Vo,71:78,72:299,78:$VE,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{11:$Vl,12:$Vm,44:300,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},o($Vz,[2,83]),o($Vz,[2,85]),o($Vz,[2,84]),o($Vz,[2,86]),{14:[1,301]},{23:[1,302]},o($Vu1,[2,43],{49:303,51:304,52:305,53:$Vv1}),{14:[1,307]},{14:[2,50],106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ},{2:$VI,9:113,11:$V2,16:308,17:$VJ,20:$VK,24:$VL,25:111,26:112,27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,41:$V5,42:$V6,43:$V7,46:27,47:$V8,48:$V9,55:$Va,59:$Vb,60:$Vc,61:$Vd,64:$Ve,65:$Vf,71:24,94:$Vg,105:38},{12:[1,309]},{11:[1,311],63:310,64:[1,312],65:[1,313]},{2:$VI,9:113,11:$V2,16:314,17:$VJ,20:$VK,24:$VL,25:111,26:112,27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,41:$V5,42:$V6,43:$V7,46:27,47:$V8,48:$V9,55:$Va,59:$Vb,60:$Vc,61:$Vd,64:$Ve,65:$Vf,71:24,94:$Vg,105:38},{2:$VI,9:113,11:$V2,16:315,17:$VJ,20:$VK,24:$VL,25:111,26:112,27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,41:$V5,42:$V6,43:$V7,46:27,47:$V8,48:$V9,55:$Va,59:$Vb,60:$Vc,61:$Vd,64:$Ve,65:$Vf,71:24,94:$Vg,105:38},{11:$V51,19:316,101:$V61,102:$V71,103:$V81,104:$V91},{11:$Vl,12:$Vm,44:317,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{11:[1,318]},{11:[1,319]},{23:[1,320],106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ},{14:[2,71]},{14:[2,67]},{11:[1,321]},{11:[1,322]},o($V$,[2,179]),{11:$Vl,12:$Vm,44:323,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{14:[1,324]},o($Vi,[2,116]),o($V01,[2,118],{106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ}),{17:[1,327],23:[1,329],77:[1,328],96:325,97:326},o($Vn1,[2,130]),{18:[1,330]},{2:$VI,9:113,11:$V2,16:331,17:$VJ,20:$VK,24:$VL,25:111,26:112,27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,41:$V5,42:$V6,43:$V7,46:27,47:$V8,48:$V9,55:$Va,59:$Vb,60:$Vc,61:$Vd,64:$Ve,65:$Vf,71:24,94:$Vg,105:38},{2:$VI,9:113,11:$V2,16:332,17:$VJ,20:$VK,24:$VL,25:111,26:112,27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,41:$V5,42:$V6,43:$V7,46:27,47:$V8,48:$V9,55:$Va,59:$Vb,60:$Vc,61:$Vd,64:$Ve,65:$Vf,71:24,94:$Vg,105:38},{11:$V51,19:333,101:$V61,102:$V71,103:$V81,104:$V91},o($V01,[2,123]),o($V01,[2,125],{21:[1,334]}),{11:$V51,19:335,101:$V61,102:$V71,103:$V81,104:$V91},{14:[1,336]},o($Vz,[2,105]),o($Vz,[2,109]),o($Vz,[2,103],{106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ}),{11:$Vf1,81:337,100:178},o($Vz,[2,106],{21:[1,338]}),{14:[1,339]},o($Vk1,[2,92]),o($Vk1,[2,95]),o($Vk1,[2,96]),o($Vn1,[2,137]),o($Vn1,[2,139]),o($Vz,[2,82],{106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ}),{23:[1,340]},o($Vi,[2,117]),{17:[2,48],50:341,54:[1,342]},o($Vu1,[2,42],{52:343,53:$Vv1}),o($Vg1,[2,45]),{11:$Vl,12:$Vm,44:344,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{23:[1,345]},{17:[1,346]},{11:$Vl,12:$Vm,44:347,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{14:[1,348]},{21:[1,349],64:[1,350],65:[1,351]},{11:[1,352]},{66:[1,353]},{17:[1,354]},{17:[1,355]},{21:[1,356]},{23:[1,357],106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ},{14:[2,70]},{14:[2,66]},o($Vo1,[2,58]),{14:[2,69]},{14:[2,65]},o($V01,[2,185],{106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ}),o($V$,[2,184]),o($Vi,[2,128]),{11:$Vt1,98:358},o($Vi,[2,136],{23:[1,359]}),{11:[2,133]},{11:[2,134]},{11:[1,361],19:360,101:$V61,102:$V71,103:$V81,104:$V91},{17:[1,362]},{17:[1,363]},{15:[1,364]},{11:$Vl,12:$Vm,44:365,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},o($V01,[2,127]),{15:$Vw1,18:$Vx1,22:366},{17:[1,368],23:$Vl1,77:$Vm1,99:246},{78:[1,369]},{15:$Vw1,18:$Vx1,22:370},o($Vi,[2,77]),{17:[1,371]},{18:[1,372]},o($Vg1,[2,44]),{18:[1,373],106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ},o($Vi,[2,49]),o($Vi,[2,52]),{14:[1,374],106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ},{15:[1,375]},{11:$Vl,12:$Vm,44:376,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{14:[2,60]},{14:[2,62]},{14:[2,61]},{14:[2,63]},o($Vi,[2,68]),o($Vi,[2,64]),{11:$Vl,12:$Vm,44:377,64:$Vn,65:$Vo,71:78,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},o($Vo1,[2,56]),o($Vn1,[2,129]),o($Vi,[2,135]),o($Vn1,[2,131]),o($Vn1,$Vj1,{78:[1,378]}),o($Vk,[2,38]),o($Vh,[2,9]),{2:$VI,9:113,11:$V2,16:379,17:$VJ,20:$VK,24:$VL,25:111,26:112,27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,41:$V5,42:$V6,43:$V7,46:27,47:$V8,48:$V9,55:$Va,59:$Vb,60:$Vc,61:$Vd,64:$Ve,65:$Vf,71:24,94:$Vg,105:38},o($V01,[2,126],{106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ}),{15:[1,380]},{11:$V51,19:381,101:$V61,102:$V71,103:$V81,104:$V91},o($Vz,[2,108]),{11:$Vl,12:$Vm,15:$Vc1,44:174,64:$Vn,65:$Vo,71:78,78:$Vd1,79:382,80:$Ve1,82:172,83:173,105:38,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{15:[1,383]},o($Vi,[2,41]),{2:$VI,9:113,11:$V2,16:384,17:$VJ,20:$VK,24:$VL,25:111,26:112,27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,41:$V5,42:$V6,43:$V7,46:27,47:$V8,48:$V9,55:$Va,59:$Vb,60:$Vc,61:$Vd,64:$Ve,65:$Vf,71:24,94:$Vg,105:38},o($Vg1,$VJ,{27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,71:24,46:27,105:38,25:111,26:112,9:113,16:385,2:$VI,11:$V2,20:$VK,24:$VL,41:$V5,42:$V6,43:$V7,47:$V8,48:$V9,55:$Va,59:$Vb,60:$Vc,61:$Vd,64:$Ve,65:$Vf,94:$Vg}),{23:[1,386]},{2:$VI,9:113,11:$V2,16:387,17:$VJ,20:$VK,24:$VL,25:111,26:112,27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,41:$V5,42:$V6,43:$V7,46:27,47:$V8,48:$V9,55:$Va,59:$Vb,60:$Vc,61:$Vd,64:$Ve,65:$Vf,71:24,94:$Vg,105:38},{14:[2,59],106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ},{23:[1,388],106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV,116:$VW,117:$VX,118:$VY,119:$VZ},{80:[1,389]},{17:[1,390]},{2:$VI,9:113,11:$V2,16:391,17:$VJ,20:$VK,24:$VL,25:111,26:112,27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,41:$V5,42:$V6,43:$V7,46:27,47:$V8,48:$V9,55:$Va,59:$Vb,60:$Vc,61:$Vd,64:$Ve,65:$Vf,71:24,94:$Vg,105:38},{15:[2,147]},{80:[1,392]},{2:$VI,9:113,11:$V2,16:393,17:$VJ,20:$VK,24:$VL,25:111,26:112,27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,41:$V5,42:$V6,43:$V7,46:27,47:$V8,48:$V9,55:$Va,59:$Vb,60:$Vc,61:$Vd,64:$Ve,65:$Vf,71:24,94:$Vg,105:38},{17:[2,47]},o($Vg1,[2,46]),o($Vi,[2,53]),{17:[1,394]},o($Vo1,[2,55]),o($Vn1,[2,132]),o($Vh,[2,10]),{17:[1,395]},o($Vz,[2,107]),{17:[1,396]},o($Vi,[2,54]),{23:[1,397]},{23:[1,398]},o($Vh,[2,11]),o($Vh,[2,12])],
defaultActions: {40:[2,1],247:[2,140],248:[2,141],270:[2,71],271:[2,67],318:[2,70],319:[2,66],321:[2,69],322:[2,65],328:[2,133],329:[2,134],350:[2,60],351:[2,62],352:[2,61],353:[2,63],381:[2,147],384:[2,47]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    let tablaErrores = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"yylineno":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* salta espacios en blanco */
break;
case 1:/* comentario simple*/
break;
case 2:/*comentario multilinea*/
break;
case 3:  return 127; 
break;
case 4:  return 127; 
break;
case 5:  return 127; 
break;
case 6:  return 101;  
break;
case 7:  return 102; 
break;
case 8:  return 103;  
break;
case 9:  return 94;    
break;
case 10:  return 104;    
break;
case 11:  return 20;   
break;
case 12:  return 24; 
break;
case 13:  return 'R_Array'; 
break;
case 14:  return 74;  
break;
case 15:  return 90;   
break;
case 16:  return 128;
break;
case 17:  return 10;
break;
case 18:return 47;
break;
case 19:return 45;
break;
case 20:return 48;
break;
case 21:return 53;
break;
case 22:return 54;
break;
case 23:return 61;
break;
case 24:return 68;
break;
case 25:return 70;
break;
case 26:return 59;
break;
case 27:return 60;
break;
case 28:return 41;
break;
case 29:return 42;
break;
case 30:return 43;
break;
case 31:return 55;
break;
case 32:return 57;
break;
case 33:return 124;
break;
case 34:return 125;
break;
case 35:return 'R_Undefined';
break;
case 36:return 64;
break;
case 37:return 65;
break;
case 38:return 114;
break;
case 39:return 115;
break;
case 40:return 118;
break;
case 41:return 116;
break;
case 42:return 117;
break;
case 43:return 119;
break;
case 44:return 111;
break;
case 45:return 109;
break;
case 46:return 108;
break;
case 47:return 21;
break;
case 48:return 113;
break;
case 49:return 112;
break;
case 50:return 110;
break;
case 51:return 121;
break;
case 52:return 106;
break;
case 53:return 107;
break;
case 54:return 18;
break;
case 55:return 23;
break;
case 56:return 15;
break;
case 57:return 17;
break;
case 58:return 12;
break;
case 59:return 14;
break;
case 60:return 56;
break;
case 61:return 'S_ComillaSimple';
break;
case 62:return 77;
break;
case 63:return 'S_ComillaDoble';
break;
case 64:return 93;
break;
case 65:return 78;
break;
case 66:return 80;
break;
case 67:return 123;
break;
case 68:return 122;
break;
case 69:return 11;
break;
case 70:  return 5; 
break;
case 71:tablaErrores.push({Tipo_Error: 'Error_Lexico',Error : yy_.yytext , Fila  : yy_.yylloc.first_line , Columna  :  yy_.yylloc.first_column })
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[\"][^\\\"]*([\\][\\\"ntr][^\\\"]*)*[\"])/,/^(?:[\'][^\\\']*([\\][\\\'ntr][^\\\']*)*[\'])/,/^(?:[\`][^\\\`]*([\\][\\\`ntr][^\\\`]*)*[\`])/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:string\b)/,/^(?:type\b)/,/^(?:void\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:Array\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:undefined\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?::)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:\\')/,/^(?:,)/,/^(?:")/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Reporte_Errores;
exports.Parser = Reporte_Errores.Parser;
exports.parse = function () { return Reporte_Errores.parse.apply(Reporte_Errores, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}