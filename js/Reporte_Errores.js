/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Reporte_Errores = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[1,38],$V3=[1,9],$V4=[1,10],$V5=[1,37],$V6=[1,34],$V7=[1,35],$V8=[1,36],$V9=[1,41],$Va=[1,29],$Vb=[1,30],$Vc=[1,31],$Vd=[1,32],$Ve=[1,33],$Vf=[1,26],$Vg=[1,27],$Vh=[1,39],$Vi=[2,5,10,11,20,24,42,43,44,45,49,50,57,61,62,63,66,67,99],$Vj=[2,5,10,11,17,20,24,42,43,44,45,49,50,55,56,57,61,62,63,66,67,99],$Vk=[1,57],$Vl=[2,5,10,11,17,20,24,42,43,44,45,47,49,50,55,56,57,61,62,63,66,67,99],$Vm=[1,79],$Vn=[1,80],$Vo=[1,70],$Vp=[1,69],$Vq=[1,71],$Vr=[1,72],$Vs=[1,73],$Vt=[1,74],$Vu=[1,75],$Vv=[1,76],$Vw=[1,77],$Vx=[1,78],$Vy=[2,160],$Vz=[1,87],$VA=[14,17,18,21,23,58,66,67,79,82,111,112,113,114,115,116,117,118,119,120,121,122,123,124],$VB=[23,79],$VC=[2,112],$VD=[1,92],$VE=[1,94],$VF=[1,102],$VG=[1,101],$VH=[2,81],$VI=[1,106],$VJ=[1,112],$VK=[1,121],$VL=[2,14],$VM=[1,122],$VN=[1,123],$VO=[1,131],$VP=[1,132],$VQ=[1,133],$VR=[1,134],$VS=[1,135],$VT=[1,136],$VU=[1,137],$VV=[1,138],$VW=[1,139],$VX=[1,140],$VY=[1,141],$VZ=[1,142],$V_=[1,143],$V$=[1,144],$V01=[14,17,18,23,79,82,111,112,113,114,115,116,117,118,119,120,121,122,123,124],$V11=[14,17,18,23,66,67,79,82,111,112,113,114,115,116,117,118,119,120,121,122,123,124],$V21=[14,79],$V31=[14,17,18,21,23,58,66,67,79,80,82,111,112,113,114,115,116,117,118,119,120,121,122,123,124],$V41=[1,163],$V51=[1,162],$V61=[2,102],$V71=[1,169],$V81=[2,127],$V91=[1,173],$Va1=[1,172],$Vb1=[1,179],$Vc1=[1,175],$Vd1=[1,176],$Ve1=[1,177],$Vf1=[1,178],$Vg1=[1,181],$Vh1=[14,17,23,79],$Vi1=[1,188],$Vj1=[17,55,56],$Vk1=[2,11,17,20,24,42,43,44,45,49,50,55,56,57,61,62,63,66,67,99],$Vl1=[79,82],$Vm1=[1,254],$Vn1=[14,15,17,21,23,79,80],$Vo1=[1,263],$Vp1=[1,262],$Vq1=[17,23,79],$Vr1=[11,12,66,67,120,126,127,128,129,130,131,132],$Vs1=[14,17,18,23,79,82,111,112],$Vt1=[14,17,18,23,79,82,111,112,113,114,115,116,117,118],$Vu1=[14,17,18,23,79,82,111,112,113,114,115,116,117,118,119,120],$Vv1=[14,17,18,23,79,82,111,112,113,114,115,116,117,118,119,120,121,122],$Vw1=[1,300],$Vx1=[14,17,21,23,79,80],$Vy1=[17,56],$Vz1=[1,325],$VA1=[2,156],$VB1=[1,389];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CONT":4,"EOF":5,"LISTA_CONTENIDO":6,"CONTENIDO":7,"FUNCIONES":8,"ESTRUCTURAS_DE_CONTROL":9,"R_Funcion":10,"Identificador":11,"S_ParentesisAbre":12,"PARAM":13,"S_ParentesisCierra":14,"S_LlaveAbre":15,"EDD":16,"S_LlaveCierra":17,"S_DosPuntos":18,"TIPOS_DE_DATO":19,"R_Let":20,"S_Igual":21,"TIPAR_FUNCION":22,"S_PuntoComa":23,"R_Const":24,"LISTADO_ESTRUCTURAS":25,"CONT_ESTRUCTURAS_CONTROL":26,"VARIABLES":27,"ASIGNACION":28,"LISTADO_IF":29,"ELSE":30,"SWITCH":31,"IMPRIMIR":32,"WHILE":33,"DO_WHILE":34,"FOR":35,"FOR_OF":36,"FOR_IN":37,"SENTENCIAS_TRANSFERENCIA":38,"FUNCION_GRAFICAR":39,"LLAMADA_FUNC":40,"TYPES":41,"R_Graficar":42,"R_Break":43,"R_Continue":44,"R_Return":45,"EXPRESION_G":46,"R_Else":47,"IF":48,"R_If":49,"R_Switch":50,"CASE":51,"DEFINIR_DEFAULT":52,"LISTA_CASE":53,"DEFINIR_CASE":54,"R_Case":55,"R_Default":56,"R_Console":57,"S_Punto":58,"R_Log":59,"FUNC":60,"R_While":61,"R_Do":62,"R_For":63,"CONT_FOR":64,"FIN_FOR":65,"OP_Incremento":66,"OP_Decremento":67,"IdentificadorG":68,"CONT_FOR_IN":69,"R_In":70,"CONT_FOR_OF":71,"R_Of":72,"ATRIBUTOS":73,"LISTA_DE_ASIGNACIONES":74,"COMPLETAR_ASIGNACION":75,"R_Push":76,"LISTADO_ASIGNACION":77,"CONTENIDO_ASIGNACION":78,"S_Coma":79,"S_CorcheteAbre":80,"CONT_ASIG_ARRAY":81,"S_CorcheteCierra":82,"LISTA_DECLARACION_TYPES":83,"L_CORCHETE":84,"L_C":85,"LISTA_CORCHETE":86,"L_CORCHETE_V":87,"L_C_V":88,"LISTA_AS_MV":89,"LISTA_ASIGN_ARRAY":90,"CONT_ARRAY_ASIGN_VV":91,"LISTADO_VAR":92,"CONT_VAR":93,"PARAMETROS_FUNC":94,"R_Pop":95,"LISTA_PARAMETROS":96,"PARAMETROS":97,"S_Interrogacion":98,"T_Type":99,"LISTA_TYPES":100,"FIN_TYPES":101,"SEPARADOR":102,"CONTENIDO_TYPES":103,"SEPARADOR_DECLARACION_TYPES":104,"CONTENIDO_DECLARACION_TYPES":105,"T_Number":106,"T_Boolean":107,"T_String":108,"T_Void":109,"CONT_ATRIBUTOS":110,"LOG_Concatenar":111,"LOG_OR":112,"REL_IgualIgual":113,"REL_MayorIgualQue":114,"REL_MayorQue":115,"REL_MenorIgualQue":116,"REL_MenorQue":117,"REL_Distinto":118,"OP_Mas":119,"OP_Menos":120,"OP_Multiplicacion":121,"OP_Division":122,"OP_Exponenciacion":123,"OP_Modulo":124,"CONTENIDO_EXPRESION":125,"LOG_Not":126,"Decimal":127,"Entero":128,"R_True":129,"R_False":130,"R_Undefined":131,"Cadena":132,"OPCIONAL":133,"R_Length":134,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"R_Funcion",11:"Identificador",12:"S_ParentesisAbre",14:"S_ParentesisCierra",15:"S_LlaveAbre",17:"S_LlaveCierra",18:"S_DosPuntos",20:"R_Let",21:"S_Igual",23:"S_PuntoComa",24:"R_Const",42:"R_Graficar",43:"R_Break",44:"R_Continue",45:"R_Return",47:"R_Else",49:"R_If",50:"R_Switch",55:"R_Case",56:"R_Default",57:"R_Console",58:"S_Punto",59:"R_Log",61:"R_While",62:"R_Do",63:"R_For",66:"OP_Incremento",67:"OP_Decremento",68:"IdentificadorG",70:"R_In",72:"R_Of",76:"R_Push",79:"S_Coma",80:"S_CorcheteAbre",82:"S_CorcheteCierra",95:"R_Pop",98:"S_Interrogacion",99:"T_Type",106:"T_Number",107:"T_Boolean",108:"T_String",109:"T_Void",111:"LOG_Concatenar",112:"LOG_OR",113:"REL_IgualIgual",114:"REL_MayorIgualQue",115:"REL_MayorQue",116:"REL_MenorIgualQue",117:"REL_MenorQue",118:"REL_Distinto",119:"OP_Mas",120:"OP_Menos",121:"OP_Multiplicacion",122:"OP_Division",123:"OP_Exponenciacion",124:"OP_Modulo",126:"LOG_Not",127:"Decimal",128:"Entero",129:"R_True",130:"R_False",131:"R_Undefined",132:"Cadena",134:"R_Length"},
productions_: [0,[3,2],[4,1],[4,0],[6,2],[6,1],[7,1],[7,1],[7,1],[8,8],[8,10],[8,12],[8,12],[16,1],[16,0],[25,2],[25,1],[26,1],[26,1],[9,1],[9,1],[9,2],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[39,4],[38,2],[38,2],[38,2],[38,3],[29,3],[29,1],[48,7],[30,4],[30,0],[31,8],[51,1],[51,0],[53,2],[53,1],[54,4],[52,3],[52,0],[32,7],[60,1],[60,0],[33,7],[34,9],[35,10],[64,7],[64,5],[64,2],[64,4],[65,3],[65,2],[65,2],[65,2],[65,2],[37,7],[69,4],[69,4],[69,3],[36,7],[71,4],[71,4],[71,3],[28,5],[28,4],[28,4],[28,4],[28,4],[28,8],[75,1],[75,0],[77,2],[77,1],[78,4],[78,3],[78,3],[78,3],[78,3],[78,7],[74,1],[74,3],[74,3],[84,1],[85,2],[85,1],[86,2],[87,1],[88,2],[88,1],[89,3],[81,1],[81,0],[90,3],[90,1],[91,1],[91,3],[91,3],[27,3],[27,3],[92,3],[92,1],[93,1],[93,3],[93,5],[93,3],[93,5],[93,4],[93,6],[93,7],[93,5],[40,5],[40,6],[94,3],[94,1],[94,0],[13,1],[13,0],[96,3],[96,1],[97,3],[97,5],[97,4],[97,4],[97,6],[97,5],[41,6],[100,3],[100,1],[103,3],[103,4],[102,1],[102,1],[101,2],[101,1],[83,3],[83,1],[105,3],[104,1],[104,1],[19,1],[19,1],[19,1],[19,1],[19,1],[22,2],[22,0],[73,3],[73,1],[110,2],[110,1],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,2],[46,2],[46,2],[46,2],[46,2],[46,2],[46,1],[125,1],[125,1],[125,1],[125,1],[125,1],[125,1],[125,3],[125,4],[125,3],[125,1],[125,3],[125,5],[133,3],[133,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log($$[$0-1]);var temp = tablaErrores; limpiarErrores(); return {Arbol : $$[$0-1] , Errores : temp};
break;
case 4: case 82:
$$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 5: case 16: case 83: case 90: case 111: case 158:
this.$ = [$$[$0]];
break;
case 8: case 18:
this.$ ='';tablaErrores.push({ tipo  : ' Error_Sintactico ', Error  : 'Simbolo inesperado: ' + yytext , Fila  : this._$.first_line , Columna  :  this._$.first_column });
break;
case 9:
this.$ = $$[$0-7] + $$[$0-6] +$$[$0-5] +$$[$0-4] +$$[$0-3] +$$[$0-2] 
break;
case 10:
this.$ = $$[$0-9] + $$[$0-8] +$$[$0-7] +$$[$0-6] +$$[$0-5] +$$[$0-4] 
break;
case 11:
this.$ = $$[$0-11] + $$[$0-10] +$$[$0-9] +$$[$0-8] +$$[$0-7] +$$[$0-6] +$$[$0-5]+$$[$0-4]+$$[$0-3]
break;
case 15:
$$[$0-1].push($$[$0]);this.$ = $$[$0-1];
break;
case 33:
this.$ = {tipoInstruccion : "GRAFICARTS" , contenido : []};
break;
case 51:
this.$ = {tipoInstruccion : "CONSOLE" , contenido : $$[$0-2]};
break;
case 52:
this.$ = $$[$0];
break;
case 74:
this.$ = {tipoInstruccion : "ASIGNACION", identificador :$$[$0-4] ,valor : $$[$0-2] , listadoA : $$[$0-1]};
break;
case 75:
this.$ = {tipoInstruccion : "ASIGNACION_INC_D", identificador :$$[$0-3] ,valor : undefined , listadoA : $$[$0-1]};
break;
case 76:
this.$ = {tipoInstruccion : "ASIGNACION_INC_A", identificador :$$[$0-3] ,valor : undefined , listadoA : $$[$0-1]};
break;
case 77:
this.$ = {tipoInstruccion : "ASIGNACION_DEC_D", identificador :$$[$0-3] ,valor : undefined , listadoA : $$[$0-1]};
break;
case 78:
this.$ = {tipoInstruccion : "ASIGNACION_DEC_A", identificador :$$[$0-3] ,valor : undefined , listadoA : $$[$0-1]};
break;
case 81:
this.$ = [];
break;
case 84:
this.$ = {tipoInstruccion : "ASIGNACION", identificador :$$[$0-2] ,valor : $$[$0] , listadoA : undefined};
break;
case 85:
this.$ = {tipoInstruccion : "ASIGNACION_INC_D", identificador :$$[$0-2] ,valor : undefined , listadoA : $$[$0]};
break;
case 86:
this.$ = {tipoInstruccion : "ASIGNACION_INC_A", identificador :$$[$0-2] ,valor : undefined , listadoA : $$[$0]};
break;
case 87:
this.$ = {tipoInstruccion : "ASIGNACION_DEC_D", identificador :$$[$0-2] ,valor : undefined , listadoA : $$[$0]};
break;
case 88:
this.$ = {tipoInstruccion : "ASIGNACION_DEC_A", identificador :$$[$0-2] ,valor : undefined , listadoA : $$[$0]};
break;
case 108: case 109:
this.$ = {tipoInstruccion :"DECLARACION" , modificador : $$[$0-2], contenido : $$[$0-1]};
break;
case 110: case 157:
$$[$0-2].push($$[$0]);this.$ = $$[$0-2];
break;
case 112:
 this.$ = {tipo : "VARIABLE" , identificador : $$[$0] , tipoDato : undefined , valor : undefined , fila : this._$.first_line};
break;
case 113:
 this.$ = {tipo : "VARIABLE" , identificador : $$[$0-2] , tipoDato : $$[$0] , valor : undefined , fila : this._$.first_line};
break;
case 114:
 this.$ = {tipo : "VARIABLE" , identificador : $$[$0-4] , tipoDato : $$[$0-2] , valor : $$[$0] , fila : this._$.first_line };
break;
case 115:
 this.$ = {tipo : "VARIABLE" , identificador : $$[$0-2] , tipoDato : undefined , valor : $$[$0] , fila : this._$.first_line};
break;
case 150:
this.$ = "NUMERO";
break;
case 151:
this.$ = "BOOLEAN";
break;
case 152:
this.$ = "CADENA";
break;
case 153:
this.$ = "VOID";
break;
case 154:
this.$ = "IDENTIFICADOR";
break;
case 160:
this.$ = valor("IDENTIFICADOR" , $$[$0], this._$.first_line);
break;
case 161:
 this.$ = operacionB($$[$0-2],$$[$0],"OPERACION_AND");
break;
case 162:
 this.$ = operacionB($$[$0-2],$$[$0],"OPERACION_OR");
break;
case 163:
 this.$ = operacionB($$[$0-2],$$[$0],"OPERACION_IGUALIGUAL");
break;
case 164:
 this.$ = operacionB($$[$0-2],$$[$0],"OPERACION_MAYORIGUALQUE");
break;
case 165:
 this.$ = operacionB($$[$0-2],$$[$0],"OPERACION_MAYORQUE");
break;
case 166:
 this.$ = operacionB($$[$0-2],$$[$0],"OPERACION_MENORIGUALQUE");
break;
case 167:
 this.$ = operacionB($$[$0-2],$$[$0],"OPERACION_MENORQUE");
break;
case 168:
 this.$ = operacionB($$[$0-2],$$[$0],"OPERACION_DISTINTO");
break;
case 169:
 this.$ = operacionB($$[$0-2],$$[$0],"OPERACION_SUMA");
break;
case 170:
 this.$ = operacionB($$[$0-2],$$[$0],"OPERACION_RESTA");
break;
case 171:
 this.$ = operacionB($$[$0-2],$$[$0],"OPERACION_MULTIPLICACION");
break;
case 172:
 this.$ = operacionB($$[$0-2],$$[$0],"OPERACION_DIVISION");
break;
case 173:
 this.$ = operacionB($$[$0-2],$$[$0],"OPERACION_EXPONENCIACION");
break;
case 174:
 this.$ = operacionB($$[$0-2],$$[$0],"OPERACION_MODULO");
break;
case 175:
 this.$ = operacionU($$[$0-1],"OPERACION_DECREMENTO_D"); 
break;
case 176:
 this.$ = operacionU($$[$0-1],"OPERACION_INCREMENTO_D"); 
break;
case 177:
 this.$ = operacionU($$[$0],"OPERACION_DECREMENTO_A"); 
break;
case 178:
 this.$ = operacionU($$[$0],"OPERACION_INCREMENTO_A"); 
break;
case 179:
 this.$ = operacionU($$[$0],"OPERACION_NEGATIVO"); 
break;
case 180:
 this.$ = operacionU($$[$0],"OPERACION_NOT"); 
break;
case 181:
 this.$ = $$[$0];
break;
case 182: case 183:
this.$ = valor("NUMERO", Number($$[$0]),this._$.first_line);
break;
case 184:
this.$ = valor("BOOLEAN", true,this._$.first_line);
break;
case 185:
this.$ = valor("BOOLEAN", false,this._$.first_line);
break;
case 186:
this.$ = valor("UNDEFINED", undefined,this._$.first_line);
break;
case 187:
this.$ = valor("CADENA" , String($$[$0]), this._$.first_line);
break;
case 190:
this.$ = $$[$0-1];
break;
}
},
table: [{2:$V0,3:1,4:2,5:[2,3],6:3,7:4,8:5,9:6,10:$V1,11:$V2,20:$V3,24:$V4,27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,41:24,42:$V5,43:$V6,44:$V7,45:$V8,48:28,49:$V9,50:$Va,57:$Vb,61:$Vc,62:$Vd,63:$Ve,66:$Vf,67:$Vg,73:25,99:$Vh,110:40},{1:[3]},{5:[1,42]},{2:$V0,5:[2,2],7:43,8:5,9:6,10:$V1,11:$V2,20:$V3,24:$V4,27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,41:24,42:$V5,43:$V6,44:$V7,45:$V8,48:28,49:$V9,50:$Va,57:$Vb,61:$Vc,62:$Vd,63:$Ve,66:$Vf,67:$Vg,73:25,99:$Vh,110:40},o($Vi,[2,5]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),{11:[1,44]},{11:[1,45],92:46,93:47},{11:[1,48],92:49,93:47},o($Vj,[2,19]),o($Vj,[2,20]),o($Vj,[2,42],{30:50,47:[1,51]}),o($Vj,[2,22]),o($Vj,[2,23]),o($Vj,[2,24]),o($Vj,[2,25]),o($Vj,[2,26]),o($Vj,[2,27]),o($Vj,[2,28]),o($Vj,[2,29]),o($Vj,[2,30]),o($Vj,[2,31]),o($Vj,[2,32]),{21:[1,52],58:[1,55],66:[1,53],67:[1,54]},{11:$Vk,73:56,110:40},{11:$Vk,73:58,110:40},o($Vl,[2,39]),{12:[1,59]},{58:[1,60]},{12:[1,61]},{15:[1,62]},{12:[1,63]},{23:[1,64]},{23:[1,65]},{11:$Vm,12:$Vn,23:[1,66],46:67,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{12:[1,82]},o([21,58,66,67],$Vy,{87:84,88:85,89:86,12:[1,83],80:$Vz}),{11:[1,88]},o($VA,[2,158]),{12:[1,89]},{1:[2,1]},o($Vi,[2,4]),{12:[1,90]},o($VB,$VC,{18:$VD,21:[1,91]}),{23:[1,93],79:$VE},o($VB,[2,111]),o($VB,$VC,{18:$VD,21:[1,95]}),{23:[1,96],79:$VE},o($Vj,[2,21]),{15:[1,98],48:97,49:$V9},{11:$Vm,12:$Vn,15:$VF,46:100,66:$Vo,67:$Vp,73:81,74:99,80:$VG,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{23:$VH,75:103,77:104,78:105,79:$VI},{23:$VH,75:107,77:104,78:105,79:$VI},{11:$Vk,76:[1,108],95:[1,109],110:110},{23:$VH,58:$VJ,75:111,77:104,78:105,79:$VI},o($VA,$Vy,{87:84,88:85,89:86,80:$Vz}),{23:$VH,58:$VJ,75:113,77:104,78:105,79:$VI},{11:$Vm,12:$Vn,46:114,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{59:[1,115]},{11:$Vm,12:$Vn,46:116,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{2:$VK,9:120,11:$V2,16:117,17:$VL,20:$VM,24:$VN,25:118,26:119,27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,41:24,42:$V5,43:$V6,44:$V7,45:$V8,48:28,49:$V9,50:$Va,57:$Vb,61:$Vc,62:$Vd,63:$Ve,66:$Vf,67:$Vg,73:25,99:$Vh,110:40},{11:[1,128],20:[1,127],24:[1,129],64:124,69:126,71:125},o($Vj,[2,34]),o($Vj,[2,35]),o($Vj,[2,36]),{23:[1,130],111:$VO,112:$VP,113:$VQ,114:$VR,115:$VS,116:$VT,117:$VU,118:$VV,119:$VW,120:$VX,121:$VY,122:$VZ,123:$V_,124:$V$},o($V01,[2,181],{66:[1,146],67:[1,145]}),{11:$Vm,12:$Vn,73:81,110:40,125:147,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{11:$Vm,12:$Vn,73:81,110:40,125:148,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{11:$Vm,12:$Vn,73:81,110:40,125:149,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{11:$Vm,12:$Vn,46:150,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},o($V11,[2,182]),o($V11,[2,183]),o($V11,[2,184]),o($V11,[2,185]),o($V11,[2,186]),o($V11,[2,187]),o([14,17,18,23,58,66,67,79,82,111,112,113,114,115,116,117,118,119,120,121,122,123,124],$Vy,{87:84,88:85,89:86,12:[1,151],80:$Vz}),{11:$Vm,12:$Vn,46:152,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},o($V11,[2,191],{58:[1,153]}),{14:[1,154]},o($V21,[2,125],{110:40,125:68,73:81,94:155,46:156,11:$Vm,12:$Vn,66:$Vo,67:$Vp,120:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx}),o($VA,[2,159]),o($VA,[2,97],{89:157,80:$Vz}),o($V31,[2,99]),{11:$Vm,12:$Vn,15:$V41,46:161,66:$Vo,67:$Vp,73:81,80:$V51,81:158,82:$V61,90:159,91:160,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{21:[1,164]},{11:$Vm,12:$Vn,46:165,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{11:$V71,13:166,14:$V81,96:167,97:168},{10:[1,170],11:$Vm,12:$Vn,15:$V91,46:171,66:$Vo,67:$Vp,73:81,80:$Va1,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{11:$Vb1,19:174,106:$Vc1,107:$Vd1,108:$Ve1,109:$Vf1},o($Vj,[2,108]),{11:$Vg1,93:180},{10:[1,182],11:$Vm,12:$Vn,15:$V91,46:171,66:$Vo,67:$Vp,73:81,80:$Va1,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},o($Vj,[2,109]),o($Vl,[2,38]),{2:$VK,9:120,11:$V2,16:183,17:$VL,20:$VM,24:$VN,25:118,26:119,27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,41:24,42:$V5,43:$V6,44:$V7,45:$V8,48:28,49:$V9,50:$Va,57:$Vb,61:$Vc,62:$Vd,63:$Ve,66:$Vf,67:$Vg,73:25,99:$Vh,110:40},{23:$VH,75:184,77:104,78:105,79:$VI},o($Vh1,[2,90],{111:$VO,112:$VP,113:$VQ,114:$VR,115:$VS,116:$VT,117:$VU,118:$VV,119:$VW,120:$VX,121:$VY,122:$VZ,123:$V_,124:$V$}),{11:$Vm,12:$Vn,15:$V41,46:161,66:$Vo,67:$Vp,73:81,80:$V51,81:185,82:$V61,90:159,91:160,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{11:$Vi1,83:186,105:187},{23:[1,189]},{23:[2,80],78:190,79:$VI},o($VB,[2,83]),{11:[1,191],66:[1,192],67:[1,193],73:194,110:40},{23:[1,195]},{12:[1,196]},{12:[1,197]},o($VA,[2,157]),{23:[1,198]},{11:$Vk,110:110},{23:[1,199]},{14:[1,200],111:$VO,112:$VP,113:$VQ,114:$VR,115:$VS,116:$VT,117:$VU,118:$VV,119:$VW,120:$VX,121:$VY,122:$VZ,123:$V_,124:$V$},{12:[1,201]},{14:[1,202],111:$VO,112:$VP,113:$VQ,114:$VR,115:$VS,116:$VT,117:$VU,118:$VV,119:$VW,120:$VX,121:$VY,122:$VZ,123:$V_,124:$V$},{17:[1,203]},o($Vj1,[2,13],{27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,41:24,73:25,48:28,110:40,9:120,26:204,2:$VK,11:$V2,20:$VM,24:$VN,42:$V5,43:$V6,44:$V7,45:$V8,49:$V9,50:$Va,57:$Vb,61:$Vc,62:$Vd,63:$Ve,66:$Vf,67:$Vg,99:$Vh}),o($Vk1,[2,16]),o($Vk1,[2,17]),o($Vk1,[2,18]),{11:$Vg1,92:46,93:47},{11:$Vg1,92:49,93:47},{11:$Vm,12:$Vn,46:205,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{14:[1,206]},{14:[1,207]},{11:[1,208]},{21:[1,210],23:[1,209],70:[1,212],72:[1,211]},{11:[1,213]},o($Vj,[2,37]),{11:$Vm,12:$Vn,46:214,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{11:$Vm,12:$Vn,46:215,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{11:$Vm,12:$Vn,46:216,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{11:$Vm,12:$Vn,46:217,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{11:$Vm,12:$Vn,46:218,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{11:$Vm,12:$Vn,46:219,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{11:$Vm,12:$Vn,46:220,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{11:$Vm,12:$Vn,46:221,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{11:$Vm,12:$Vn,46:222,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{11:$Vm,12:$Vn,46:223,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{11:$Vm,12:$Vn,46:224,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{11:$Vm,12:$Vn,46:225,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{11:$Vm,12:$Vn,46:226,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{11:$Vm,12:$Vn,46:227,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},o($V01,[2,175]),o($V01,[2,176]),o($V01,[2,177]),o($V01,[2,178]),o($V01,[2,179]),o($V01,[2,180]),{11:$Vm,12:$Vn,14:[1,228],46:230,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx,133:229},{14:[1,231],111:$VO,112:$VP,113:$VQ,114:$VR,115:$VS,116:$VT,117:$VU,118:$VV,119:$VW,120:$VX,121:$VY,122:$VZ,123:$V_,124:$V$},{11:$Vk,95:[1,233],110:110,134:[1,232]},{23:[1,234]},{14:[1,235],79:[1,236]},o($V21,[2,124],{111:$VO,112:$VP,113:$VQ,114:$VR,115:$VS,116:$VT,117:$VU,118:$VV,119:$VW,120:$VX,121:$VY,122:$VZ,123:$V_,124:$V$}),o($V31,[2,98]),{82:[1,237]},{79:[1,238],82:[2,101]},o($Vl1,[2,104]),o($Vl1,[2,105],{111:$VO,112:$VP,113:$VQ,114:$VR,115:$VS,116:$VT,117:$VU,118:$VV,119:$VW,120:$VX,121:$VY,122:$VZ,123:$V_,124:$V$}),{11:$Vm,12:$Vn,15:$V41,46:161,66:$Vo,67:$Vp,73:81,80:$V51,81:239,82:$V61,90:159,91:160,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{11:$Vi1,83:240,105:187},{15:[1,241]},{14:[1,242],111:$VO,112:$VP,113:$VQ,114:$VR,115:$VS,116:$VT,117:$VU,118:$VV,119:$VW,120:$VX,121:$VY,122:$VZ,123:$V_,124:$V$},{14:[1,243]},{14:[2,126],79:[1,244]},o($V21,[2,129]),{18:[1,245],98:[1,246]},{12:[1,247]},o($VB,[2,115],{111:$VO,112:$VP,113:$VQ,114:$VR,115:$VS,116:$VT,117:$VU,118:$VV,119:$VW,120:$VX,121:$VY,122:$VZ,123:$V_,124:$V$}),{11:$Vm,12:$Vn,15:$V41,46:161,66:$Vo,67:$Vp,73:81,80:$V51,81:248,82:$V61,90:159,91:160,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{11:$Vi1,83:249,105:187},o($VB,[2,113],{84:251,85:252,86:253,21:[1,250],80:$Vm1}),o($Vn1,[2,150]),o($Vn1,[2,151]),o($Vn1,[2,152]),o($Vn1,[2,153]),o($Vn1,[2,154]),o($VB,[2,110]),o($VB,$VC,{18:$VD,21:[1,255]}),{12:[1,256]},{17:[1,257]},{23:[1,258]},{82:[1,259]},{17:[1,260],23:$Vo1,79:$Vp1,104:261},o($Vq1,[2,146]),{18:[1,264]},o($Vj,[2,75]),o($VB,[2,82]),{21:[1,265],58:$Vy,66:[1,266],67:[1,267],80:$Vz,87:84,88:85,89:86},{11:[1,268]},{11:[1,269]},{58:[1,270]},o($Vj,[2,77]),{11:$Vm,12:$Vn,15:$VF,46:100,66:$Vo,67:$Vp,73:81,74:271,80:$VG,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{14:[1,272]},o($Vj,[2,76]),o($Vj,[2,78]),{15:[1,273]},{11:$Vm,12:$Vn,14:[2,53],46:275,60:274,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{15:[1,276]},{61:[1,277]},o($Vk1,[2,15]),{23:[1,278],111:$VO,112:$VP,113:$VQ,114:$VR,115:$VS,116:$VT,117:$VU,118:$VV,119:$VW,120:$VX,121:$VY,122:$VZ,123:$V_,124:$V$},{15:[1,279]},{15:[1,280]},{18:[1,281],21:[1,282],70:[1,284],72:[1,283]},o($Vr1,[2,59]),{11:$Vm,12:$Vn,46:285,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{11:[1,286]},{11:[1,287]},{70:[1,289],72:[1,288]},o($Vs1,[2,161],{113:$VQ,114:$VR,115:$VS,116:$VT,117:$VU,118:$VV,119:$VW,120:$VX,121:$VY,122:$VZ,123:$V_,124:$V$}),o($Vs1,[2,162],{113:$VQ,114:$VR,115:$VS,116:$VT,117:$VU,118:$VV,119:$VW,120:$VX,121:$VY,122:$VZ,123:$V_,124:$V$}),o($Vt1,[2,163],{119:$VW,120:$VX,121:$VY,122:$VZ,123:$V_,124:$V$}),o($Vt1,[2,164],{119:$VW,120:$VX,121:$VY,122:$VZ,123:$V_,124:$V$}),o($Vt1,[2,165],{119:$VW,120:$VX,121:$VY,122:$VZ,123:$V_,124:$V$}),o($Vt1,[2,166],{119:$VW,120:$VX,121:$VY,122:$VZ,123:$V_,124:$V$}),o($Vt1,[2,167],{119:$VW,120:$VX,121:$VY,122:$VZ,123:$V_,124:$V$}),o($Vt1,[2,168],{119:$VW,120:$VX,121:$VY,122:$VZ,123:$V_,124:$V$}),o($Vu1,[2,169],{121:$VY,122:$VZ,123:$V_,124:$V$}),o($Vu1,[2,170],{121:$VY,122:$VZ,123:$V_,124:$V$}),o($Vv1,[2,171],{123:$V_,124:$V$}),o($Vv1,[2,172],{123:$V_,124:$V$}),o($V01,[2,173]),o($V01,[2,174]),o($V11,[2,188]),{14:[1,290],79:[1,291]},o($V21,[2,195],{111:$VO,112:$VP,113:$VQ,114:$VR,115:$VS,116:$VT,117:$VU,118:$VV,119:$VW,120:$VX,121:$VY,122:$VZ,123:$V_,124:$V$}),o($V11,[2,190]),o($V11,[2,192]),{12:[1,292]},o($Vj,[2,33]),{23:[1,293]},{11:$Vm,12:$Vn,46:294,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},o($V31,[2,100]),{11:$Vm,12:$Vn,15:$V41,46:161,66:$Vo,67:$Vp,73:81,80:$V51,91:295,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{82:[1,296]},{17:[1,297],23:$Vo1,79:$Vp1,104:261},{11:$Vw1,100:298,103:299},{15:[1,301]},{15:[1,302],18:[1,303]},{11:$V71,97:304},{11:$Vb1,19:305,106:$Vc1,107:$Vd1,108:$Ve1,109:$Vf1},{18:[1,306]},{11:$V71,13:307,14:$V81,96:167,97:168},{82:[1,308]},{17:[1,309],23:$Vo1,79:$Vp1,104:261},{11:$Vm,12:$Vn,15:[1,311],46:310,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},o($VB,[2,117],{21:[1,312]}),o([14,17,21,23,79],[2,93],{86:313,80:$Vm1}),o($Vx1,[2,95]),{82:[1,314]},{11:$Vm,12:$Vn,15:$V91,46:171,66:$Vo,67:$Vp,73:81,80:$Va1,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{11:$V71,13:315,14:$V81,96:167,97:168},o($Vj,[2,41]),o($Vj,[2,74]),o($Vh1,[2,91]),o($Vh1,[2,92]),{11:$Vi1,105:316},{11:[2,148]},{11:[2,149]},{11:$Vm,12:$Vn,15:$VF,46:100,66:$Vo,67:$Vp,73:81,74:317,80:$VG,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{11:$Vm,12:$Vn,46:318,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},o($VB,[2,85]),o($VB,[2,87]),o($VB,[2,86]),o($VB,[2,88]),{11:$Vk,76:[1,319],110:110},{14:[1,320]},{23:[1,321]},o($Vy1,[2,45],{51:322,53:323,54:324,55:$Vz1}),{14:[1,326]},{14:[2,52],111:$VO,112:$VP,113:$VQ,114:$VR,115:$VS,116:$VT,117:$VU,118:$VV,119:$VW,120:$VX,121:$VY,122:$VZ,123:$V_,124:$V$},{2:$VK,9:120,11:$V2,16:327,17:$VL,20:$VM,24:$VN,25:118,26:119,27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,41:24,42:$V5,43:$V6,44:$V7,45:$V8,48:28,49:$V9,50:$Va,57:$Vb,61:$Vc,62:$Vd,63:$Ve,66:$Vf,67:$Vg,73:25,99:$Vh,110:40},{12:[1,328]},{11:[1,330],65:329,66:[1,331],67:[1,332]},{2:$VK,9:120,11:$V2,16:333,17:$VL,20:$VM,24:$VN,25:118,26:119,27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,41:24,42:$V5,43:$V6,44:$V7,45:$V8,48:28,49:$V9,50:$Va,57:$Vb,61:$Vc,62:$Vd,63:$Ve,66:$Vf,67:$Vg,73:25,99:$Vh,110:40},{2:$VK,9:120,11:$V2,16:334,17:$VL,20:$VM,24:$VN,25:118,26:119,27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,41:24,42:$V5,43:$V6,44:$V7,45:$V8,48:28,49:$V9,50:$Va,57:$Vb,61:$Vc,62:$Vd,63:$Ve,66:$Vf,67:$Vg,73:25,99:$Vh,110:40},{11:$Vb1,19:335,106:$Vc1,107:$Vd1,108:$Ve1,109:$Vf1},{11:$Vm,12:$Vn,46:336,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{11:[1,337]},{11:[1,338]},{23:[1,339],111:$VO,112:$VP,113:$VQ,114:$VR,115:$VS,116:$VT,117:$VU,118:$VV,119:$VW,120:$VX,121:$VY,122:$VZ,123:$V_,124:$V$},{14:[2,73]},{14:[2,69]},{11:[1,340]},{11:[1,341]},o($V11,[2,189]),{11:$Vm,12:$Vn,46:342,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{14:[1,343]},o($Vj,[2,121]),o($V21,[2,123],{111:$VO,112:$VP,113:$VQ,114:$VR,115:$VS,116:$VT,117:$VU,118:$VV,119:$VW,120:$VX,121:$VY,122:$VZ,123:$V_,124:$V$}),o($Vl1,[2,103]),o($Vl1,[2,106]),o($Vl1,[2,107]),{17:[1,346],23:[1,348],79:[1,347],101:344,102:345},o($Vq1,[2,138]),{18:[1,349]},{2:$VK,9:120,11:$V2,16:350,17:$VL,20:$VM,24:$VN,25:118,26:119,27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,41:24,42:$V5,43:$V6,44:$V7,45:$V8,48:28,49:$V9,50:$Va,57:$Vb,61:$Vc,62:$Vd,63:$Ve,66:$Vf,67:$Vg,73:25,99:$Vh,110:40},{2:$VK,9:120,11:$V2,16:351,17:$VL,20:$VM,24:$VN,25:118,26:119,27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,41:24,42:$V5,43:$V6,44:$V7,45:$V8,48:28,49:$V9,50:$Va,57:$Vb,61:$Vc,62:$Vd,63:$Ve,66:$Vf,67:$Vg,73:25,99:$Vh,110:40},{11:$Vb1,19:352,106:$Vc1,107:$Vd1,108:$Ve1,109:$Vf1},o($V21,[2,128]),o($V21,[2,130],{85:252,86:253,84:354,21:[1,353],80:$Vm1}),{11:$Vb1,19:355,106:$Vc1,107:$Vd1,108:$Ve1,109:$Vf1},{14:[1,356]},o($VB,[2,116]),o($VB,[2,120]),o($VB,[2,114],{111:$VO,112:$VP,113:$VQ,114:$VR,115:$VS,116:$VT,117:$VU,118:$VV,119:$VW,120:$VX,121:$VY,122:$VZ,123:$V_,124:$V$}),{11:$Vi1,83:357,105:187},{80:$Vz,87:358,88:85,89:86},o($Vx1,[2,94]),o($Vx1,[2,96]),{14:[1,359]},o($Vq1,[2,145]),o($Vq1,[2,147]),o($VB,[2,84],{111:$VO,112:$VP,113:$VQ,114:$VR,115:$VS,116:$VT,117:$VU,118:$VV,119:$VW,120:$VX,121:$VY,122:$VZ,123:$V_,124:$V$}),{12:[1,360]},{23:$VH,75:361,77:104,78:105,79:$VI},o($Vj,[2,122]),{17:[2,50],52:362,56:[1,363]},o($Vy1,[2,44],{54:364,55:$Vz1}),o($Vj1,[2,47]),{11:$Vm,12:$Vn,46:365,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{23:[1,366]},{17:[1,367]},{11:$Vm,12:$Vn,46:368,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{14:[1,369]},{21:[1,370],66:[1,371],67:[1,372]},{11:[1,373]},{68:[1,374]},{17:[1,375]},{17:[1,376]},{21:[1,377]},{23:[1,378],111:$VO,112:$VP,113:$VQ,114:$VR,115:$VS,116:$VT,117:$VU,118:$VV,119:$VW,120:$VX,121:$VY,122:$VZ,123:$V_,124:$V$},{14:[2,72]},{14:[2,68]},o($Vr1,[2,60]),{14:[2,71]},{14:[2,67]},o($V21,[2,194],{111:$VO,112:$VP,113:$VQ,114:$VR,115:$VS,116:$VT,117:$VU,118:$VV,119:$VW,120:$VX,121:$VY,122:$VZ,123:$V_,124:$V$}),o($V11,[2,193]),o($Vj,[2,136]),{11:$Vw1,103:379},o($Vj,[2,144],{23:[1,380]}),{11:[2,141]},{11:[2,142]},{11:$Vb1,19:381,106:$Vc1,107:$Vd1,108:$Ve1,109:$Vf1},{17:[1,382]},{17:[1,383]},{15:[1,384]},{11:$Vm,12:$Vn,46:385,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},o($V21,[2,133],{21:[1,386]}),o($V21,[2,132],{85:252,86:253,84:387,80:$Vm1}),{15:$VA1,18:$VB1,22:388},{17:[1,390],23:$Vo1,79:$Vp1,104:261},o($VB,[2,118]),{15:$VA1,18:$VB1,22:391},{11:$Vm,12:$Vn,15:$VF,46:100,66:$Vo,67:$Vp,73:81,74:392,80:$VG,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{23:[1,393]},{17:[1,394]},{18:[1,395]},o($Vj1,[2,46]),{18:[1,396],111:$VO,112:$VP,113:$VQ,114:$VR,115:$VS,116:$VT,117:$VU,118:$VV,119:$VW,120:$VX,121:$VY,122:$VZ,123:$V_,124:$V$},o($Vj,[2,51]),o($Vj,[2,54]),{14:[1,397],111:$VO,112:$VP,113:$VQ,114:$VR,115:$VS,116:$VT,117:$VU,118:$VV,119:$VW,120:$VX,121:$VY,122:$VZ,123:$V_,124:$V$},{15:[1,398]},{11:$Vm,12:$Vn,46:399,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},{14:[2,62]},{14:[2,64]},{14:[2,63]},{14:[2,65]},o($Vj,[2,70]),o($Vj,[2,66]),{11:$Vm,12:$Vn,46:400,66:$Vo,67:$Vp,73:81,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},o($Vr1,[2,58]),o($Vq1,[2,137]),o($Vj,[2,143]),o($Vq1,[2,139],{85:252,86:253,84:401,80:$Vm1}),o($Vl,[2,40]),o($Vi,[2,9]),{2:$VK,9:120,11:$V2,16:402,17:$VL,20:$VM,24:$VN,25:118,26:119,27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,41:24,42:$V5,43:$V6,44:$V7,45:$V8,48:28,49:$V9,50:$Va,57:$Vb,61:$Vc,62:$Vd,63:$Ve,66:$Vf,67:$Vg,73:25,99:$Vh,110:40},o($V21,[2,131],{111:$VO,112:$VP,113:$VQ,114:$VR,115:$VS,116:$VT,117:$VU,118:$VV,119:$VW,120:$VX,121:$VY,122:$VZ,123:$V_,124:$V$}),{11:$Vm,12:$Vn,15:$VF,46:100,66:$Vo,67:$Vp,73:81,74:403,80:$VG,110:40,120:$Vq,125:68,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,131:$Vw,132:$Vx},o($V21,[2,135]),{15:[1,404]},{11:$Vb1,19:405,106:$Vc1,107:$Vd1,108:$Ve1,109:$Vf1},o($VB,[2,119]),{15:[1,406]},{14:[1,407]},o($Vj,[2,79]),o($Vj,[2,43]),{2:$VK,9:120,11:$V2,16:408,17:$VL,20:$VM,24:$VN,25:118,26:119,27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,41:24,42:$V5,43:$V6,44:$V7,45:$V8,48:28,49:$V9,50:$Va,57:$Vb,61:$Vc,62:$Vd,63:$Ve,66:$Vf,67:$Vg,73:25,99:$Vh,110:40},o($Vj1,$VL,{27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,41:24,73:25,48:28,110:40,25:118,26:119,9:120,16:409,2:$VK,11:$V2,20:$VM,24:$VN,42:$V5,43:$V6,44:$V7,45:$V8,49:$V9,50:$Va,57:$Vb,61:$Vc,62:$Vd,63:$Ve,66:$Vf,67:$Vg,99:$Vh}),{23:[1,410]},{2:$VK,9:120,11:$V2,16:411,17:$VL,20:$VM,24:$VN,25:118,26:119,27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,41:24,42:$V5,43:$V6,44:$V7,45:$V8,48:28,49:$V9,50:$Va,57:$Vb,61:$Vc,62:$Vd,63:$Ve,66:$Vf,67:$Vg,73:25,99:$Vh,110:40},{14:[2,61],111:$VO,112:$VP,113:$VQ,114:$VR,115:$VS,116:$VT,117:$VU,118:$VV,119:$VW,120:$VX,121:$VY,122:$VZ,123:$V_,124:$V$},{23:[1,412],111:$VO,112:$VP,113:$VQ,114:$VR,115:$VS,116:$VT,117:$VU,118:$VV,119:$VW,120:$VX,121:$VY,122:$VZ,123:$V_,124:$V$},o($Vq1,[2,140]),{17:[1,413]},o($V21,[2,134]),{2:$VK,9:120,11:$V2,16:414,17:$VL,20:$VM,24:$VN,25:118,26:119,27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,41:24,42:$V5,43:$V6,44:$V7,45:$V8,48:28,49:$V9,50:$Va,57:$Vb,61:$Vc,62:$Vd,63:$Ve,66:$Vf,67:$Vg,73:25,99:$Vh,110:40},{15:[2,155]},{2:$VK,9:120,11:$V2,16:415,17:$VL,20:$VM,24:$VN,25:118,26:119,27:11,28:12,29:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:23,41:24,42:$V5,43:$V6,44:$V7,45:$V8,48:28,49:$V9,50:$Va,57:$Vb,61:$Vc,62:$Vd,63:$Ve,66:$Vf,67:$Vg,73:25,99:$Vh,110:40},o($VB,[2,89]),{17:[2,49]},o($Vj1,[2,48]),o($Vj,[2,55]),{17:[1,416]},o($Vr1,[2,57]),o($Vi,[2,10]),{17:[1,417]},{17:[1,418]},o($Vj,[2,56]),{23:[1,419]},{23:[1,420]},o($Vi,[2,11]),o($Vi,[2,12])],
defaultActions: {42:[2,1],262:[2,148],263:[2,149],286:[2,73],287:[2,69],337:[2,72],338:[2,68],340:[2,71],341:[2,67],347:[2,141],348:[2,142],371:[2,62],372:[2,64],373:[2,63],374:[2,65],405:[2,155],408:[2,49]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var tablaErrores = [];

    function limpiarErrores(){
        tablaErrores = [];
    }

    function operacionB(operadorIzq, operadorDer, tipo) {
        return {
            opIzq: operadorIzq,
            opDer: operadorDer,
            tipo: tipo,
        };
    }

    function operacionU(operador, tipo) {
        return {
            opIzq: operador,
            opDer: {tipo : "UNDEFINED",valor : undefined},
            tipo: tipo
        };
    }

    function valor(tipo,valor ,fil){
        return { 
            tipo : tipo, 
            valor : valor,
            fila : fil
        };
    }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"yylineno":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* salta espacios en blanco */
break;
case 1:/* comentario simple*/
break;
case 2:/*comentario multilinea*/
break;
case 3:  yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);return 132; 
break;
case 4:  yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);return 132; 
break;
case 5:  yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);return 132; 
break;
case 6:  return 106;  
break;
case 7:  return 107; 
break;
case 8:  return 108;  
break;
case 9:  return 99;    
break;
case 10:  return 109;    
break;
case 11:  return 20;   
break;
case 12:  return 24; 
break;
case 13:  return 'R_Array'; 
break;
case 14:  return 76;  
break;
case 15:  return 95;   
break;
case 16:  return 134;
break;
case 17:  return 10;
break;
case 18:  return 42;
break;
case 19:return 49;
break;
case 20:return 47;
break;
case 21:return 50;
break;
case 22:return 55;
break;
case 23:return 56;
break;
case 24:return 63;
break;
case 25:return 70;
break;
case 26:return 72;
break;
case 27:return 61;
break;
case 28:return 62;
break;
case 29:return 43;
break;
case 30:return 44;
break;
case 31:return 45;
break;
case 32:return 57;
break;
case 33:return 59;
break;
case 34:return 129;
break;
case 35:return 130;
break;
case 36:return 131;
break;
case 37:return 66;
break;
case 38:return 67;
break;
case 39:return 119;
break;
case 40:return 120;
break;
case 41:return 123;
break;
case 42:return 121;
break;
case 43:return 122;
break;
case 44:return 124;
break;
case 45:return 116;
break;
case 46:return 114;
break;
case 47:return 113;
break;
case 48:return 21;
break;
case 49:return 118;
break;
case 50:return 117;
break;
case 51:return 115;
break;
case 52:return 126;
break;
case 53:return 111;
break;
case 54:return 112;
break;
case 55:return 18;
break;
case 56:return 23;
break;
case 57:return 15;
break;
case 58:return 17;
break;
case 59:return 12;
break;
case 60:return 14;
break;
case 61:return 58;
break;
case 62:return 'S_ComillaSimple';
break;
case 63:return 79;
break;
case 64:return 'S_ComillaDoble';
break;
case 65:return 98;
break;
case 66:return 80;
break;
case 67:return 82;
break;
case 68:return 127;
break;
case 69:return 128;
break;
case 70:return 11;
break;
case 71:  return 5; 
break;
case 72:tablaErrores.push({tipo: 'Error_Lexico',Error : 'Simbolo desconocido: ' + yy_.yytext , Fila  : yy_.yylloc.first_line , Columna  :  yy_.yylloc.first_column });
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[\"][^\\\"]*([\\][\\\"ntr][^\\\"]*)*[\"])/,/^(?:[\'][^\\\']*([\\][\\\'ntr][^\\\']*)*[\'])/,/^(?:[\`][^\\\`]*([\\][\\\`ntr][^\\\`]*)*[\`])/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:string\b)/,/^(?:type\b)/,/^(?:void\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:Array\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:function\b)/,/^(?:graficar_ts\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:undefined\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?::)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:\\')/,/^(?:,)/,/^(?:")/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Reporte_Errores;
exports.Parser = Reporte_Errores.Parser;
exports.parse = function () { return Reporte_Errores.parse.apply(Reporte_Errores, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}