/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var AnalisisLS = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,3],$V1=[1,7],$V2=[1,22],$V3=[1,8],$V4=[1,9],$V5=[1,31],$V6=[1,32],$V7=[1,33],$V8=[1,34],$V9=[1,26],$Va=[1,27],$Vb=[1,28],$Vc=[1,29],$Vd=[1,30],$Ve=[1,23],$Vf=[1,24],$Vg=[5,10,11,16,19,23,39,40,41,45,46,53,57,58,59,62,63],$Vh=[5,10,11,16,19,23,39,40,41,45,46,51,52,53,57,58,59,62,63],$Vi=[5,10,11,16,19,23,39,40,41,43,45,46,51,52,53,57,58,59,62,63],$Vj=[1,69],$Vk=[1,70],$Vl=[1,62],$Vm=[1,61],$Vn=[1,63],$Vo=[1,64],$Vp=[1,65],$Vq=[1,66],$Vr=[1,67],$Vs=[1,68],$Vt=[1,71],$Vu=[22,72],$Vv=[2,86],$Vw=[1,75],$Vx=[1,77],$Vy=[2,74],$Vz=[1,86],$VA=[14,72],$VB=[2,13],$VC=[1,98],$VD=[1,99],$VE=[1,107],$VF=[1,108],$VG=[1,109],$VH=[1,110],$VI=[1,111],$VJ=[1,112],$VK=[1,113],$VL=[1,114],$VM=[1,115],$VN=[1,116],$VO=[1,117],$VP=[1,118],$VQ=[1,119],$VR=[1,120],$VS=[14,17,22,72,83,84,85,86,87,88,89,90,91,92,93,94,95,96],$VT=[14,17,22,62,63,72,83,84,85,86,87,88,89,90,91,92,93,94,95,96],$VU=[1,133],$VV=[2,95],$VW=[1,137],$VX=[1,138],$VY=[1,139],$VZ=[1,140],$V_=[1,142],$V$=[16,51,52],$V01=[11,16,19,23,39,40,41,45,46,51,52,53,57,58,59,62,63],$V11=[14,15,20,22,72],$V21=[11,12,62,63,92,98,99,100,101,102,104],$V31=[14,17,22,72,83,84],$V41=[14,17,22,72,83,84,85,86,87,88,89,90],$V51=[14,17,22,72,83,84,85,86,87,88,89,90,91,92],$V61=[14,17,22,72,83,84,85,86,87,88,89,90,91,92,93,94],$V71=[16,52],$V81=[1,238],$V91=[2,106],$Va1=[1,285];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CONT":4,"EOF":5,"LISTA_CONTENIDO":6,"CONTENIDO":7,"FUNCIONES":8,"ESTRUCTURAS_DE_CONTROL":9,"R_Funcion":10,"Identificador":11,"S_ParentesisAbre":12,"PARAM":13,"S_ParentesisCierra":14,"S_LlaveAbre":15,"S_LlaveCierra":16,"S_DosPuntos":17,"TIPOS_DE_DATO":18,"R_Let":19,"S_Igual":20,"TIPAR_FUNCION":21,"S_PuntoComa":22,"R_Const":23,"EDD":24,"LISTADO_ESTRUCTURAS":25,"VARIABLES":26,"ASIGNACION":27,"LISTADO_IF":28,"ELSE":29,"SWITCH":30,"IMPRIMIR":31,"WHILE":32,"DO_WHILE":33,"FOR":34,"FOR_OF":35,"FOR_IN":36,"SENTENCIAS_TRANSFERENCIA":37,"LLAMADA_FUNC":38,"R_Break":39,"R_Continue":40,"R_Return":41,"EXPRESION_G":42,"R_Else":43,"IF":44,"R_If":45,"R_Switch":46,"CASE":47,"DEFINIR_DEFAULT":48,"LISTA_CASE":49,"DEFINIR_CASE":50,"R_Case":51,"R_Default":52,"R_Console":53,"S_Punto":54,"R_Log":55,"FUNC":56,"R_While":57,"R_Do":58,"R_For":59,"CONT_FOR":60,"FIN_FOR":61,"OP_Incremento":62,"OP_Decremento":63,"IdentificadorG":64,"CONT_FOR_IN":65,"R_In":66,"CONT_FOR_OF":67,"R_Of":68,"COMPLETAR_ASIGNACION":69,"LISTADO_ASIGNACION":70,"CONTENIDO_ASIGNACION":71,"S_Coma":72,"LISTADO_VAR":73,"CONT_VAR":74,"PARAMETROS_FUNC":75,"LISTA_PARAMETROS":76,"PARAMETROS":77,"S_Interrogacion":78,"T_Number":79,"T_Boolean":80,"T_String":81,"T_Void":82,"LOG_Concatenar":83,"LOG_OR":84,"REL_IgualIgual":85,"REL_MayorIgualQue":86,"REL_MayorQue":87,"REL_MenorIgualQue":88,"REL_MenorQue":89,"REL_Distinto":90,"OP_Mas":91,"OP_Menos":92,"OP_Multiplicacion":93,"OP_Division":94,"OP_Potencia":95,"OP_Modulo":96,"CONTENIDO_EXPRESION":97,"LOG_Not":98,"Entero":99,"Decimal":100,"R_True":101,"R_False":102,"OPCIONAL":103,"Cadena":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"R_Funcion",11:"Identificador",12:"S_ParentesisAbre",14:"S_ParentesisCierra",15:"S_LlaveAbre",16:"S_LlaveCierra",17:"S_DosPuntos",19:"R_Let",20:"S_Igual",22:"S_PuntoComa",23:"R_Const",39:"R_Break",40:"R_Continue",41:"R_Return",43:"R_Else",45:"R_If",46:"R_Switch",51:"R_Case",52:"R_Default",53:"R_Console",54:"S_Punto",55:"R_Log",57:"R_While",58:"R_Do",59:"R_For",62:"OP_Incremento",63:"OP_Decremento",64:"IdentificadorG",66:"R_In",68:"R_Of",72:"S_Coma",78:"S_Interrogacion",79:"T_Number",80:"T_Boolean",81:"T_String",82:"T_Void",83:"LOG_Concatenar",84:"LOG_OR",85:"REL_IgualIgual",86:"REL_MayorIgualQue",87:"REL_MayorQue",88:"REL_MenorIgualQue",89:"REL_MenorQue",90:"REL_Distinto",91:"OP_Mas",92:"OP_Menos",93:"OP_Multiplicacion",94:"OP_Division",95:"OP_Potencia",96:"OP_Modulo",98:"LOG_Not",99:"Entero",100:"Decimal",101:"R_True",102:"R_False",104:"Cadena"},
productions_: [0,[3,2],[4,1],[4,0],[6,2],[6,1],[7,1],[7,1],[8,8],[8,10],[8,12],[8,12],[24,1],[24,0],[25,2],[25,1],[9,1],[9,1],[9,2],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[37,2],[37,2],[37,2],[37,3],[28,3],[28,1],[44,7],[29,4],[29,0],[30,8],[47,1],[47,0],[49,2],[49,1],[50,4],[48,3],[48,0],[31,7],[56,1],[56,0],[32,7],[33,9],[34,10],[60,7],[60,5],[60,2],[60,4],[61,3],[61,2],[61,2],[61,2],[61,2],[36,7],[65,4],[65,4],[65,3],[35,7],[67,4],[67,4],[67,3],[27,5],[27,4],[27,4],[27,4],[27,4],[69,1],[69,0],[70,2],[70,1],[71,4],[71,3],[71,3],[71,3],[71,3],[26,3],[26,3],[73,3],[73,1],[74,1],[74,3],[74,5],[74,3],[38,5],[75,3],[75,1],[75,0],[13,1],[13,0],[76,3],[76,1],[77,3],[77,5],[77,4],[18,1],[18,1],[18,1],[18,1],[21,2],[21,0],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,2],[42,2],[42,2],[42,2],[42,2],[42,2],[42,1],[97,1],[97,1],[97,1],[97,1],[97,3],[97,4],[97,3],[97,1],[97,1],[103,3],[103,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log(this.$);
break;
case 4:
this.$ = $$[$0-1] + $$[$0]
break;
case 5: case 97:
this.$=$$[$0]
break;
case 8:
this.$ = $$[$0-7] + $$[$0-6] +$$[$0-5] +$$[$0-4] +$$[$0-3] +$$[$0-2] 
break;
case 9:
this.$ = $$[$0-9] + $$[$0-8] +$$[$0-7] +$$[$0-6] +$$[$0-5] +$$[$0-4] 
break;
case 10:
this.$ = $$[$0-11] + $$[$0-10] +$$[$0-9] +$$[$0-8] +$$[$0-7] +$$[$0-6] +$$[$0-5]+$$[$0-4]+$$[$0-3]
break;
case 50:
 this.$ = $$[$0-9] + $$[$0-8] + $$[$0-7] + $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 55: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 132: case 134: case 137:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 90:
this.$ = $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 91:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 93:
this.$='';
break;
case 96:
this.$ = $$[$0-2] + $$[$0-1]
break;
case 98:
this.$ = $$[$0-2] + $$[$0-1] +$$[$0]
break;
case 99:
this.$ = $$[$0-4] + $$[$0-3] +$$[$0-2] +$$[$0-1]
break;
case 100:
this.$ = $$[$0-3] + $$[$0-2] +$$[$0-1] +$$[$0]
break;
case 121: case 122: case 125: case 126:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 123: case 124:
 this.$ = $$[$0-1] + $$[$0];
break;
case 133:
 this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
}
},
table: [{3:1,4:2,5:$V0,6:3,7:4,8:5,9:6,10:$V1,11:$V2,19:$V3,23:$V4,26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:$V5,40:$V6,41:$V7,44:25,45:$V8,46:$V9,53:$Va,57:$Vb,58:$Vc,59:$Vd,62:$Ve,63:$Vf},{1:[3]},{5:[1,35]},o([5,16],[2,2],{8:5,9:6,26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,44:25,7:36,10:$V1,11:$V2,19:$V3,23:$V4,39:$V5,40:$V6,41:$V7,45:$V8,46:$V9,53:$Va,57:$Vb,58:$Vc,59:$Vd,62:$Ve,63:$Vf}),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),{11:[1,37]},{11:[1,38],73:39,74:40},{11:[1,41],73:42,74:40},o($Vh,[2,16]),o($Vh,[2,17]),o($Vh,[2,36],{29:43,43:[1,44]}),o($Vh,[2,19]),o($Vh,[2,20]),o($Vh,[2,21]),o($Vh,[2,22]),o($Vh,[2,23]),o($Vh,[2,24]),o($Vh,[2,25]),o($Vh,[2,26]),o($Vh,[2,27]),{12:[1,48],20:[1,45],62:[1,46],63:[1,47]},{11:[1,49]},{11:[1,50]},o($Vi,[2,33]),{12:[1,51]},{54:[1,52]},{12:[1,53]},{15:[1,54]},{12:[1,55]},{22:[1,56]},{22:[1,57]},{11:$Vj,12:$Vk,22:[1,58],42:59,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{12:[1,72]},{1:[2,1]},o($Vg,[2,4]),{12:[1,73]},o($Vu,$Vv,{17:$Vw,20:[1,74]}),{22:[1,76],72:$Vx},o($Vu,[2,85]),o($Vu,$Vv,{17:$Vw,20:[1,78]}),{22:[1,79],72:$Vx},o($Vh,[2,18]),{15:[1,81],44:80,45:$V8},{11:$Vj,12:$Vk,42:82,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{22:$Vy,69:83,70:84,71:85,72:$Vz},{22:$Vy,69:87,70:84,71:85,72:$Vz},o($VA,[2,93],{97:60,75:88,42:89,11:$Vj,12:$Vk,62:$Vl,63:$Vm,92:$Vn,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt}),{22:$Vy,69:90,70:84,71:85,72:$Vz},{22:$Vy,69:91,70:84,71:85,72:$Vz},{11:$Vj,12:$Vk,42:92,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{55:[1,93]},{11:$Vj,12:$Vk,42:94,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{9:97,11:$V2,16:$VB,19:$VC,23:$VD,24:95,25:96,26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:$V5,40:$V6,41:$V7,44:25,45:$V8,46:$V9,53:$Va,57:$Vb,58:$Vc,59:$Vd,62:$Ve,63:$Vf},{11:[1,104],19:[1,103],23:[1,105],60:100,65:102,67:101},o($Vh,[2,28]),o($Vh,[2,29]),o($Vh,[2,30]),{22:[1,106],83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR},o($VS,[2,127],{62:[1,122],63:[1,121]}),{11:$Vj,12:$Vk,97:123,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{11:$Vj,12:$Vk,97:124,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{11:$Vj,12:$Vk,97:125,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{11:$Vj,12:$Vk,97:126,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},o($VT,[2,128]),o($VT,[2,129]),o($VT,[2,130]),o($VT,[2,131]),o($VT,[2,135],{12:[1,127]}),{11:$Vj,12:$Vk,42:128,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},o($VT,[2,136]),{11:$Vj,12:$Vk,42:129,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{11:$VU,13:130,14:$VV,76:131,77:132},{10:[1,134],11:$Vj,12:$Vk,42:135,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{18:136,79:$VW,80:$VX,81:$VY,82:$VZ},o($Vh,[2,82]),{11:$V_,74:141},{10:[1,143],11:$Vj,12:$Vk,42:135,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},o($Vh,[2,83]),o($Vi,[2,32]),{9:97,11:$V2,16:$VB,19:$VC,23:$VD,24:144,25:96,26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:$V5,40:$V6,41:$V7,44:25,45:$V8,46:$V9,53:$Va,57:$Vb,58:$Vc,59:$Vd,62:$Ve,63:$Vf},{22:$Vy,69:145,70:84,71:85,72:$Vz,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR},{22:[1,146]},{22:[2,73],71:147,72:$Vz},o($Vu,[2,76]),{11:[1,148],62:[1,149],63:[1,150]},{22:[1,151]},{14:[1,152],72:[1,153]},o($VA,[2,92],{83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR}),{22:[1,154]},{22:[1,155]},{14:[1,156],83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR},{12:[1,157]},{14:[1,158],83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR},{16:[1,159]},o($V$,[2,12],{26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,44:25,9:160,11:$V2,19:$VC,23:$VD,39:$V5,40:$V6,41:$V7,45:$V8,46:$V9,53:$Va,57:$Vb,58:$Vc,59:$Vd,62:$Ve,63:$Vf}),o($V01,[2,15]),{11:$V_,73:39,74:40},{11:$V_,73:42,74:40},{11:$Vj,12:$Vk,42:161,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{14:[1,162]},{14:[1,163]},{11:[1,164]},{20:[1,166],22:[1,165],66:[1,168],68:[1,167]},{11:[1,169]},o($Vh,[2,31]),{11:$Vj,12:$Vk,42:170,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{11:$Vj,12:$Vk,42:171,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{11:$Vj,12:$Vk,42:172,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{11:$Vj,12:$Vk,42:173,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{11:$Vj,12:$Vk,42:174,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{11:$Vj,12:$Vk,42:175,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{11:$Vj,12:$Vk,42:176,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{11:$Vj,12:$Vk,42:177,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{11:$Vj,12:$Vk,42:178,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{11:$Vj,12:$Vk,42:179,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{11:$Vj,12:$Vk,42:180,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{11:$Vj,12:$Vk,42:181,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{11:$Vj,12:$Vk,42:182,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{11:$Vj,12:$Vk,42:183,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},o($VS,[2,121]),o($VS,[2,122]),o($VS,[2,123]),o($VS,[2,124]),o($VS,[2,125]),o($VS,[2,126]),{11:$Vj,12:$Vk,14:[1,184],42:186,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,103:185,104:$Vt},{14:[1,187],83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR},{14:[1,188],83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR},{14:[1,189]},{14:[2,94],72:[1,190]},o($VA,[2,97]),{17:[1,191],78:[1,192]},{12:[1,193]},o($Vu,[2,89],{83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR}),o($Vu,[2,87],{20:[1,194]}),o($V11,[2,101]),o($V11,[2,102]),o($V11,[2,103]),o($V11,[2,104]),o($Vu,[2,84]),o($Vu,$Vv,{17:$Vw,20:[1,195]}),{12:[1,196]},{16:[1,197]},{22:[1,198]},o($Vh,[2,69]),o($Vu,[2,75]),{20:[1,199],62:[1,200],63:[1,201]},{11:[1,202]},{11:[1,203]},o($Vh,[2,71]),{22:[1,204]},{11:$Vj,12:$Vk,42:205,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},o($Vh,[2,70]),o($Vh,[2,72]),{15:[1,206]},{11:$Vj,12:$Vk,14:[2,47],42:208,56:207,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{15:[1,209]},{57:[1,210]},o($V01,[2,14]),{22:[1,211],83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR},{15:[1,212]},{15:[1,213]},{17:[1,214],20:[1,215],66:[1,217],68:[1,216]},o($V21,[2,53]),{11:$Vj,12:$Vk,42:218,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{11:[1,219]},{11:[1,220]},{66:[1,222],68:[1,221]},o($V31,[2,107],{85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR}),o($V31,[2,108],{85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR}),o($V41,[2,109],{91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR}),o($V41,[2,110],{91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR}),o($V41,[2,111],{91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR}),o($V41,[2,112],{91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR}),o($V41,[2,113],{91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR}),o($V41,[2,114],{91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR}),o($V51,[2,115],{93:$VO,94:$VP,95:$VQ,96:$VR}),o($V51,[2,116],{93:$VO,94:$VP,95:$VQ,96:$VR}),o($V61,[2,117],{95:$VQ,96:$VR}),o($V61,[2,118],{95:$VQ,96:$VR}),o($VS,[2,119]),o($VS,[2,120]),o($VT,[2,132]),{14:[1,223],72:[1,224]},o($VA,[2,138],{83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR}),o($VT,[2,134]),{15:[1,225]},{15:[1,226],17:[1,227]},{11:$VU,77:228},{18:229,79:$VW,80:$VX,81:$VY,82:$VZ},{17:[1,230]},{11:$VU,13:231,14:$VV,76:131,77:132},{11:$Vj,12:$Vk,42:232,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{11:$Vj,12:$Vk,42:135,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{11:$VU,13:233,14:$VV,76:131,77:132},o($Vh,[2,35]),o($Vh,[2,68]),{11:$Vj,12:$Vk,42:234,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},o($Vu,[2,78]),o($Vu,[2,80]),o($Vu,[2,79]),o($Vu,[2,81]),o($Vh,[2,90]),o($VA,[2,91],{83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR}),o($V71,[2,39],{47:235,49:236,50:237,51:$V81}),{14:[1,239]},{14:[2,46],83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR},{9:97,11:$V2,16:$VB,19:$VC,23:$VD,24:240,25:96,26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:$V5,40:$V6,41:$V7,44:25,45:$V8,46:$V9,53:$Va,57:$Vb,58:$Vc,59:$Vd,62:$Ve,63:$Vf},{12:[1,241]},{11:[1,243],61:242,62:[1,244],63:[1,245]},{9:97,11:$V2,16:$VB,19:$VC,23:$VD,24:246,25:96,26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:$V5,40:$V6,41:$V7,44:25,45:$V8,46:$V9,53:$Va,57:$Vb,58:$Vc,59:$Vd,62:$Ve,63:$Vf},{9:97,11:$V2,16:$VB,19:$VC,23:$VD,24:247,25:96,26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:$V5,40:$V6,41:$V7,44:25,45:$V8,46:$V9,53:$Va,57:$Vb,58:$Vc,59:$Vd,62:$Ve,63:$Vf},{18:248,79:$VW,80:$VX,81:$VY,82:$VZ},{11:$Vj,12:$Vk,42:249,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{11:[1,250]},{11:[1,251]},{22:[1,252],83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR},{14:[2,67]},{14:[2,63]},{11:[1,253]},{11:[1,254]},o($VT,[2,133]),{11:$Vj,12:$Vk,42:255,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{9:97,11:$V2,16:$VB,19:$VC,23:$VD,24:256,25:96,26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:$V5,40:$V6,41:$V7,44:25,45:$V8,46:$V9,53:$Va,57:$Vb,58:$Vc,59:$Vd,62:$Ve,63:$Vf},{4:257,6:3,7:4,8:5,9:6,10:$V1,11:$V2,16:$V0,19:$V3,23:$V4,26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:$V5,40:$V6,41:$V7,44:25,45:$V8,46:$V9,53:$Va,57:$Vb,58:$Vc,59:$Vd,62:$Ve,63:$Vf},{18:258,79:$VW,80:$VX,81:$VY,82:$VZ},o($VA,[2,96]),o($VA,[2,98],{20:[1,259]}),{18:260,79:$VW,80:$VX,81:$VY,82:$VZ},{14:[1,261]},o($Vu,[2,88],{83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR}),{14:[1,262]},o($Vu,[2,77],{83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR}),{16:[2,44],48:263,52:[1,264]},o($V71,[2,38],{50:265,51:$V81}),o($V$,[2,41]),{11:$Vj,12:$Vk,42:266,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{22:[1,267]},{16:[1,268]},{11:$Vj,12:$Vk,42:269,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{14:[1,270]},{20:[1,271],62:[1,272],63:[1,273]},{11:[1,274]},{64:[1,275]},{16:[1,276]},{16:[1,277]},{20:[1,278]},{22:[1,279],83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR},{14:[2,66]},{14:[2,62]},o($V21,[2,54]),{14:[2,65]},{14:[2,61]},o($VA,[2,137],{83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR}),{16:[1,280]},{16:[1,281]},{15:[1,282]},{11:$Vj,12:$Vk,42:283,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},o($VA,[2,100]),{15:$V91,17:$Va1,21:284},{15:$V91,17:$Va1,21:286},{16:[1,287]},{17:[1,288]},o($V$,[2,40]),{17:[1,289],83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR},o($Vh,[2,45]),o($Vh,[2,48]),{14:[1,290],83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR},{15:[1,291]},{11:$Vj,12:$Vk,42:292,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},{14:[2,56]},{14:[2,58]},{14:[2,57]},{14:[2,59]},o($Vh,[2,64]),o($Vh,[2,60]),{11:$Vj,12:$Vk,42:293,62:$Vl,63:$Vm,92:$Vn,97:60,98:$Vo,99:$Vp,100:$Vq,101:$Vr,102:$Vs,104:$Vt},o($V21,[2,52]),o($Vi,[2,34]),o($Vg,[2,8]),{4:294,6:3,7:4,8:5,9:6,10:$V1,11:$V2,16:$V0,19:$V3,23:$V4,26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:$V5,40:$V6,41:$V7,44:25,45:$V8,46:$V9,53:$Va,57:$Vb,58:$Vc,59:$Vd,62:$Ve,63:$Vf},o($VA,[2,99],{83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR}),{15:[1,295]},{18:296,79:$VW,80:$VX,81:$VY,82:$VZ},{15:[1,297]},o($Vh,[2,37]),{9:97,11:$V2,16:$VB,19:$VC,23:$VD,24:298,25:96,26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:$V5,40:$V6,41:$V7,44:25,45:$V8,46:$V9,53:$Va,57:$Vb,58:$Vc,59:$Vd,62:$Ve,63:$Vf},o($V$,$VB,{26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,44:25,25:96,9:97,24:299,11:$V2,19:$VC,23:$VD,39:$V5,40:$V6,41:$V7,45:$V8,46:$V9,53:$Va,57:$Vb,58:$Vc,59:$Vd,62:$Ve,63:$Vf}),{22:[1,300]},{9:97,11:$V2,16:$VB,19:$VC,23:$VD,24:301,25:96,26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:$V5,40:$V6,41:$V7,44:25,45:$V8,46:$V9,53:$Va,57:$Vb,58:$Vc,59:$Vd,62:$Ve,63:$Vf},{14:[2,55],83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR},{22:[1,302],83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR},{16:[1,303]},{4:304,6:3,7:4,8:5,9:6,10:$V1,11:$V2,16:$V0,19:$V3,23:$V4,26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:$V5,40:$V6,41:$V7,44:25,45:$V8,46:$V9,53:$Va,57:$Vb,58:$Vc,59:$Vd,62:$Ve,63:$Vf},{15:[2,105]},{4:305,6:3,7:4,8:5,9:6,10:$V1,11:$V2,16:$V0,19:$V3,23:$V4,26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:$V5,40:$V6,41:$V7,44:25,45:$V8,46:$V9,53:$Va,57:$Vb,58:$Vc,59:$Vd,62:$Ve,63:$Vf},{16:[2,43]},o($V$,[2,42]),o($Vh,[2,49]),{16:[1,306]},o($V21,[2,51]),o($Vg,[2,9]),{16:[1,307]},{16:[1,308]},o($Vh,[2,50]),{22:[1,309]},{22:[1,310]},o($Vg,[2,10]),o($Vg,[2,11])],
defaultActions: {35:[2,1],219:[2,67],220:[2,63],250:[2,66],251:[2,62],253:[2,65],254:[2,61],272:[2,56],273:[2,58],274:[2,57],275:[2,59],296:[2,105],298:[2,43]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"yylineno":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* salta espacios en blanco */
break;
case 1:/* comentario simple*/
break;
case 2:/*comentario multilinea*/
break;
case 3:  return 104; 
break;
case 4:  return 104; 
break;
case 5:  return 104; 
break;
case 6:  return 79;  
break;
case 7:  return 80; 
break;
case 8:  return 81;  
break;
case 9:  return 'T_Type';    
break;
case 10:  return 82;    
break;
case 11:  return 19;   
break;
case 12:  return 23; 
break;
case 13:  return 'R_Array'; 
break;
case 14:  return 'R_Push';  
break;
case 15:  return 'R_Pop';   
break;
case 16:  return 'R_Length';
break;
case 17:  return 10;
break;
case 18:return 45;
break;
case 19:return 43;
break;
case 20:return 46;
break;
case 21:return 51;
break;
case 22:return 52;
break;
case 23:return 59;
break;
case 24:return 66;
break;
case 25:return 68;
break;
case 26:return 57;
break;
case 27:return 58;
break;
case 28:return 39;
break;
case 29:return 40;
break;
case 30:return 41;
break;
case 31:return 53;
break;
case 32:return 55;
break;
case 33:return 101;
break;
case 34:return 102;
break;
case 35:return 62;
break;
case 36:return 63;
break;
case 37:return 91;
break;
case 38:return 92;
break;
case 39:return 93;
break;
case 40:return 94;
break;
case 41:return 'OP_Exponenciacion';
break;
case 42:return 96;
break;
case 43:return 88;
break;
case 44:return 86;
break;
case 45:return 85;
break;
case 46:return 20;
break;
case 47:return 90;
break;
case 48:return 89;
break;
case 49:return 87;
break;
case 50:return 98;
break;
case 51:return 83;
break;
case 52:return 84;
break;
case 53:return 17;
break;
case 54:return 22;
break;
case 55:return 15;
break;
case 56:return 16;
break;
case 57:return 12;
break;
case 58:return 14;
break;
case 59:return 54;
break;
case 60:return 'S_ComillaSimple';
break;
case 61:return 72;
break;
case 62:return 'S_ComillaDoble';
break;
case 63:return 78;
break;
case 64:return 100;
break;
case 65:return 99;
break;
case 66:return 11;
break;
case 67:  return 5; 
break;
case 68:console.error("error lexico: " + yy_.yytext)
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[\"][^\\\"]*([\\][\\\"ntr][^\\\"]*)*[\"])/,/^(?:[\'][^\\\"]*([\\][\\\"ntr][^\\\"]*)*[\'])/,/^(?:[\`][^\\\"]*([\\][\\\"ntr][^\\\"]*)*[\`])/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:string\b)/,/^(?:type\b)/,/^(?:void\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:Array\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\*\*)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?::)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:\\')/,/^(?:,)/,/^(?:")/,/^(?:\?)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = AnalisisLS;
exports.Parser = AnalisisLS.Parser;
exports.parse = function () { return AnalisisLS.parse.apply(AnalisisLS, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}