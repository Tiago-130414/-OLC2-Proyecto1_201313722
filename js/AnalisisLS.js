/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var AnalisisLS = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,35],$V2=[1,8],$V3=[1,9],$V4=[1,32],$V5=[1,33],$V6=[1,34],$V7=[1,38],$V8=[1,27],$V9=[1,28],$Va=[1,29],$Vb=[1,30],$Vc=[1,31],$Vd=[1,24],$Ve=[1,25],$Vf=[1,36],$Vg=[5,10,11,20,24,40,41,42,46,47,54,58,59,60,63,64,90],$Vh=[5,10,11,17,20,24,40,41,42,46,47,52,53,54,58,59,60,63,64,90],$Vi=[1,54],$Vj=[5,10,11,17,20,24,40,41,42,44,46,47,52,53,54,58,59,60,63,64,90],$Vk=[1,73],$Vl=[1,74],$Vm=[1,65],$Vn=[1,66],$Vo=[1,68],$Vp=[1,69],$Vq=[1,70],$Vr=[1,71],$Vs=[1,72],$Vt=[2,143],$Vu=[1,77],$Vv=[14,17,18,21,23,55,63,64,76,79,102,103,104,105,106,107,108,109,110,111,112,113,114,115],$Vw=[23,76],$Vx=[2,98],$Vy=[1,82],$Vz=[1,84],$VA=[1,92],$VB=[1,91],$VC=[2,76],$VD=[1,96],$VE=[1,102],$VF=[2,13],$VG=[1,110],$VH=[1,111],$VI=[1,119],$VJ=[1,120],$VK=[1,121],$VL=[1,122],$VM=[1,123],$VN=[1,124],$VO=[1,125],$VP=[1,126],$VQ=[1,127],$VR=[1,128],$VS=[1,129],$VT=[1,130],$VU=[1,131],$VV=[1,132],$VW=[14,17,18,23,76,79,102,103,104,105,106,107,108,109,110,111,112,113,114,115],$VX=[14,76],$VY=[1,146],$VZ=[2,113],$V_=[1,150],$V$=[1,149],$V01=[1,156],$V11=[1,152],$V21=[1,153],$V31=[1,154],$V41=[1,155],$V51=[1,158],$V61=[14,17,23,76],$V71=[1,167],$V81=[1,166],$V91=[2,88],$Va1=[1,170],$Vb1=[17,52,53],$Vc1=[11,17,20,24,40,41,42,46,47,52,53,54,58,59,60,63,64,90],$Vd1=[14,15,17,21,23,76,77],$Ve1=[2,137],$Vf1=[76,79],$Vg1=[1,239],$Vh1=[1,238],$Vi1=[17,23,76],$Vj1=[11,12,111,117,118,119,120,121,122],$Vk1=[14,17,18,23,76,79,102,103],$Vl1=[14,17,18,23,76,79,102,103,104,105,106,107,108,109],$Vm1=[14,17,18,23,76,79,102,103,104,105,106,107,108,109,110,111],$Vn1=[14,17,18,23,76,79,102,103,104,105,106,107,108,109,110,111,112,113],$Vo1=[1,272],$Vp1=[17,53],$Vq1=[1,297],$Vr1=[2,139],$Vs1=[1,358];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CONT":4,"EOF":5,"LISTA_CONTENIDO":6,"CONTENIDO":7,"FUNCIONES":8,"ESTRUCTURAS_DE_CONTROL":9,"R_Funcion":10,"Identificador":11,"S_ParentesisAbre":12,"PARAM":13,"S_ParentesisCierra":14,"S_LlaveAbre":15,"EDD":16,"S_LlaveCierra":17,"S_DosPuntos":18,"TIPOS_DE_DATO":19,"R_Let":20,"S_Igual":21,"TIPAR_FUNCION":22,"S_PuntoComa":23,"R_Const":24,"LISTADO_ESTRUCTURAS":25,"VARIABLES":26,"ASIGNACION":27,"LISTADO_IF":28,"ELSE":29,"SWITCH":30,"IMPRIMIR":31,"WHILE":32,"DO_WHILE":33,"FOR":34,"FOR_OF":35,"FOR_IN":36,"SENTENCIAS_TRANSFERENCIA":37,"LLAMADA_FUNC":38,"TYPES":39,"R_Break":40,"R_Continue":41,"R_Return":42,"EXPRESION_G":43,"R_Else":44,"IF":45,"R_If":46,"R_Switch":47,"CASE":48,"DEFINIR_DEFAULT":49,"LISTA_CASE":50,"DEFINIR_CASE":51,"R_Case":52,"R_Default":53,"R_Console":54,"S_Punto":55,"R_Log":56,"FUNC":57,"R_While":58,"R_Do":59,"R_For":60,"CONT_FOR":61,"FIN_FOR":62,"OP_Incremento":63,"OP_Decremento":64,"IdentificadorG":65,"CONT_FOR_IN":66,"R_In":67,"CONT_FOR_OF":68,"R_Of":69,"ATRIBUTOS":70,"LISTA_DE_ASIGNACIONES":71,"COMPLETAR_ASIGNACION":72,"R_Push":73,"LISTADO_ASIGNACION":74,"CONTENIDO_ASIGNACION":75,"S_Coma":76,"S_CorcheteAbre":77,"CONT_ASIG_ARRAY":78,"S_CorcheteCierra":79,"LISTA_DECLARACION_TYPES":80,"LISTA_ASIGN_ARRAY":81,"CONT_ARRAY_ASIGN_VV":82,"LISTADO_VAR":83,"CONT_VAR":84,"PARAMETROS_FUNC":85,"R_Pop":86,"LISTA_PARAMETROS":87,"PARAMETROS":88,"S_Interrogacion":89,"T_Type":90,"LISTA_TYPES":91,"FIN_TYPES":92,"SEPARADOR":93,"CONTENIDO_TYPES":94,"SEPARADOR_DECLARACION_TYPES":95,"CONTENIDO_DECLARACION_TYPES":96,"T_Number":97,"T_Boolean":98,"T_String":99,"T_Void":100,"CONT_ATRIBUTOS":101,"LOG_Concatenar":102,"LOG_OR":103,"REL_IgualIgual":104,"REL_MayorIgualQue":105,"REL_MayorQue":106,"REL_MenorIgualQue":107,"REL_MenorQue":108,"REL_Distinto":109,"OP_Mas":110,"OP_Menos":111,"OP_Multiplicacion":112,"OP_Division":113,"OP_Exponenciacion":114,"OP_Modulo":115,"CONTENIDO_EXPRESION":116,"LOG_Not":117,"Entero":118,"Decimal":119,"R_True":120,"R_False":121,"Cadena":122,"OPCIONAL":123,"R_Length":124,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"R_Funcion",11:"Identificador",12:"S_ParentesisAbre",14:"S_ParentesisCierra",15:"S_LlaveAbre",17:"S_LlaveCierra",18:"S_DosPuntos",20:"R_Let",21:"S_Igual",23:"S_PuntoComa",24:"R_Const",40:"R_Break",41:"R_Continue",42:"R_Return",44:"R_Else",46:"R_If",47:"R_Switch",52:"R_Case",53:"R_Default",54:"R_Console",55:"S_Punto",56:"R_Log",58:"R_While",59:"R_Do",60:"R_For",63:"OP_Incremento",64:"OP_Decremento",65:"IdentificadorG",67:"R_In",69:"R_Of",73:"R_Push",76:"S_Coma",77:"S_CorcheteAbre",79:"S_CorcheteCierra",86:"R_Pop",89:"S_Interrogacion",90:"T_Type",97:"T_Number",98:"T_Boolean",99:"T_String",100:"T_Void",102:"LOG_Concatenar",103:"LOG_OR",104:"REL_IgualIgual",105:"REL_MayorIgualQue",106:"REL_MayorQue",107:"REL_MenorIgualQue",108:"REL_MenorQue",109:"REL_Distinto",110:"OP_Mas",111:"OP_Menos",112:"OP_Multiplicacion",113:"OP_Division",114:"OP_Exponenciacion",115:"OP_Modulo",117:"LOG_Not",118:"Entero",119:"Decimal",120:"R_True",121:"R_False",122:"Cadena",124:"R_Length"},
productions_: [0,[3,2],[4,1],[4,0],[6,2],[6,1],[7,1],[7,1],[8,8],[8,10],[8,12],[8,12],[16,1],[16,0],[25,2],[25,1],[9,1],[9,1],[9,2],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[37,2],[37,2],[37,2],[37,3],[28,3],[28,1],[45,7],[29,4],[29,0],[30,8],[48,1],[48,0],[50,2],[50,1],[51,4],[49,3],[49,0],[31,7],[57,1],[57,0],[32,7],[33,9],[34,10],[61,7],[61,5],[61,2],[61,4],[62,3],[62,2],[62,2],[62,2],[62,2],[36,7],[66,4],[66,4],[66,3],[35,7],[68,4],[68,4],[68,3],[27,4],[27,4],[27,4],[27,4],[27,4],[27,7],[72,1],[72,0],[74,2],[74,1],[75,4],[75,3],[75,3],[75,3],[75,3],[71,1],[71,3],[71,3],[78,1],[78,0],[81,3],[81,1],[82,1],[82,3],[82,3],[26,3],[26,3],[83,3],[83,1],[84,1],[84,3],[84,5],[84,3],[84,5],[84,5],[84,9],[84,7],[84,5],[38,5],[38,6],[85,3],[85,1],[85,0],[13,1],[13,0],[87,3],[87,1],[88,3],[88,5],[88,4],[39,6],[91,3],[91,1],[94,3],[94,5],[93,1],[93,1],[92,2],[92,1],[80,3],[80,1],[96,3],[95,1],[95,1],[19,1],[19,1],[19,1],[19,1],[19,1],[22,2],[22,0],[70,3],[70,1],[101,4],[101,1],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,2],[43,2],[43,1],[116,1],[116,1],[116,1],[116,1],[116,1],[116,3],[116,4],[116,3],[116,1],[116,3],[116,5],[123,3],[123,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log(graficar($$[$0-1]));return graficar($$[$0-1]);
break;
case 2:
this.$ = {Nombre:"CONT",vector:[$$[$0]]};
break;
case 3:
this.$ = {Nombre:"CONT",vector:[]};
break;
case 4:
this.$ = {Nombre: "LISTA_CONTENIDO" , vector:[$$[$0-1],$$[$0]]};
break;
case 5:
this.$ = {Nombre:"LISTA_CONTENIDO",vector:[$$[$0]]};
break;
case 6: case 7:
this.$ = {Nombre:"CONTENIDO",vector:[$$[$0]]};
break;
case 8:
this.$ = {Nombre:"FUNCIONES",vector:[{Nombre:$$[$0-6],vector :[]},$$[$0-4],$$[$0-1]]};
break;
case 9:
this.$ = {Nombre:"FUNCIONES",vector:[{Nombre:$$[$0-8],vector :[]},$$[$0-6],$$[$0-3],$$[$0-1]]};
break;
case 10:
this.$ = {Nombre:"FUNCIONES",vector:[{Nombre:$$[$0-10],vector :[]},$$[$0-6],$$[$0-4],$$[$0-2]]};
break;
case 11:
this.$ = {Nombre:"FUNCIONES",vector:[{Nombre:$$[$0-10],vector :[]},$$[$0-8],$$[$0-4],$$[$0-2]]};
break;
case 12: case 47: case 84: case 91: case 169:
this.$ = $$[$0];
break;
case 13:
this.$ = {Nombre: "LISTADO_ESTRUCTURAS" , vector: []};
break;
case 14:
this.$ = {Nombre:"LISTADO_ESTRUCTURAS",vector:[$$[$0-1],$$[$0]]};
break;
case 15:
this.$ = {Nombre:"LISTADO_ESTRUCTURAS",vector:[$$[$0]]};
break;
case 16:
this.$ = {Nombre:"DECLARACION_VARIABLES",vector:[$$[$0]]};
break;
case 17: case 27:
this.$ = {Nombre:"ESTRUCTURAS_DE_CONTROL",vector:[$$[$0]]};
break;
case 18:
this.$ = {Nombre:"CONDICIONAL",vector:[$$[$0-1],$$[$0]]};
break;
case 19:
this.$ = {Nombre:"CONDICIONAL",vector:[$$[$0]]};
break;
case 21: case 22: case 23: case 24: case 25:
this.$ = {Nombre:"CICLO",vector:[$$[$0]]};
break;
case 28:
this.$ = {Nombre:"DECLARACION_TYPE",vector:[$$[$0]]};
break;
case 29:
this.$ = {Nombre:"BREAK",vector:[]};
break;
case 30:
this.$ = {Nombre:"CONTINUE",vector:[]};
break;
case 31:
this.$ = {Nombre:"RETURN",vector:[]};
break;
case 32:
this.$ = {Nombre:"RETURN",vector:[$$[$0-1]]};
break;
case 33:
this.$={Nombre:"ELSE_IF",vector : [$$[$0-2]].concat($$[$0])};
break;
case 34:
this.$ = {Nombre:"IF",vector:$$[$0]};
break;
case 35:
this.$ = [$$[$0-4],$$[$0-1]];
break;
case 36:
this.$ = {Nombre:"ELSE",vector:[$$[$0-1]]};
break;
case 37:
this.$ = {Nombre : "ELSE", vector : []};
break;
case 38:
this.$ = {Nombre:"SWITCH",vector:[$$[$0-5],$$[$0-2],$$[$0-1]]};
break;
case 40:
this.$ = {Nombre:"CASE",vector:[]};
break;
case 41:
this.$ = {Nombre:"LISTA_CASE",vector:[$$[$0-1],$$[$0]]};
break;
case 42:
this.$ = {Nombre:"LISTA_CASE",vector:[$$[$0]]};
break;
case 43:
this.$ = {Nombre:"CASE",vector:[$$[$0-2],$$[$0]]};
break;
case 44:
this.$ = {Nombre:"DEFAULT",vector:[$$[$0]]};
break;
case 45:
this.$ = {Nombre:"DEFAULT",vector:[]};
break;
case 46:
this.$ = {Nombre:"IMPRIMIR",vector:[$$[$0-2]]};
break;
case 48:
this.$ = {Nombre:"FUNC",vector:[]};
break;
case 49:
this.$ = {Nombre:"WHILE",vector:[$$[$0-4],$$[$0-1]]};
break;
case 50:
this.$ = {Nombre:"DO_WHILE",vector:[$$[$0-6],$$[$0-2]]};
break;
case 51:
this.$ = {Nombre:"FOR",vector:[$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]]};
break;
case 52:
this.$ = {Nombre:"INICIO_FOR",vector:[{Nombre: $$[$0-6] , vector : []},{Nombre: $$[$0-5] , vector : []},$$[$0-3],$$[$0-1]]};
break;
case 53:
this.$ = {Nombre:"INICIO_FOR",vector:[{Nombre: $$[$0-4] , vector : []},{Nombre: $$[$0-3] , vector : []},$$[$0-1]]};
break;
case 54:
this.$ = {Nombre:"INICIO_FOR",vector:[{Nombre: $$[$0-1] , vector : []}]};
break;
case 55:
this.$ = {Nombre:"INICIO_FOR",vector:[{Nombre: $$[$0-3] , vector : []},$$[$0-1]]};
break;
case 56:
this.$ = {Nombre:"FIN_FOR",vector:[{Nombre: $$[$0-2] , vector : []},$$[$0]]};
break;
case 57: case 58: case 59: case 60:
this.$ = {Nombre:"FIN_FOR",vector:[{Nombre: $$[$0-1] , vector : []},{Nombre: $$[$0] , vector : []}]};
break;
case 61:
this.$ = {Nombre:"FOR_IN",vector:[$$[$0-4],$$[$0-1]]};
break;
case 62: case 63:
this.$ = {Nombre:"CONT_FOR_IN",vector:[{Nombre: $$[$0-3] , vector : []},{Nombre: $$[$0-2] , vector : []},{Nombre: $$[$0] , vector : []}]};
break;
case 64:
this.$ = {Nombre:"CONT_FOR_IN",vector:[{Nombre: $$[$0-2] , vector : []},{Nombre: $$[$0] , vector : []}]};
break;
case 65:
this.$ = {Nombre:"FOR_OF",vector:[$$[$0-4],$$[$0-1]]};
break;
case 66: case 67:
this.$ = {Nombre:"CONT_FOR_OF",vector:[{Nombre: $$[$0-3] , vector : []},{Nombre: $$[$0-2] , vector : []},{Nombre: $$[$0] , vector : []}]};
break;
case 68:
this.$ = {Nombre:"CONT_FOR_OF",vector:[{Nombre: $$[$0-2] , vector : []},{Nombre: $$[$0] , vector : []}]};
break;
case 69:
this.$ = {Nombre : "ASIGNACION" , vector :[$$[$0-3],$$[$0-1]]};
break;
case 70: case 72:
this.$ = {Nombre : "ASIGNACION" , vector :[{Nombre : "ASIGNACION", vector : [$$[$0-3] ,{Nombre : $$[$0-2] , vector : []}]},$$[$0-1]]};
break;
case 71: case 73:
this.$ = {Nombre : "ASIGNACION" , vector :[{Nombre : "ASIGNACION", vector : [{Nombre : $$[$0-3] , vector : []} ,$$[$0-2]]},$$[$0-1]]};
break;
case 74:
this.$ = {Nombre : "ASIGNACION" , vector : [$$[$0-6],{Nombre: $$[$0-4] , vector : []},$$[$0-2]]};
break;
case 76:
this.$ = { Nombre : "COMPLETAR_ASIGNACION" , vector : []};
break;
case 77:
this.$ = { Nombre : "LISTADO_ASIGNACION" , vector : [$$[$0-1],$$[$0]]};
break;
case 78:
this.$ = { Nombre : "LISTADO_ASIGNACION" , vector : [$$[$0]]};
break;
case 79:
this.$ = {Nombre : "CONTENIDO_ASIGNACION" , vector : [{Nombre : $$[$0-2] , vector : []},$$[$0]]};
break;
case 80: case 82:
this.$ = {Nombre : "CONTENIDO_ASIGNACION" , vector : [{Nombre : $$[$0-1] , vector : []},$$[$0]]};
break;
case 81: case 83:
this.$ = {Nombre : "CONTENIDO_ASIGNACION" , vector : [$$[$0-1],{Nombre : $$[$0] , vector : []}]};
break;
case 85: case 86: case 92: case 93: case 168:
this.$ = $$[$0-1];
break;
case 88:
this.$ = {Nombre : "CONT_ASIG_ARRAY", vector : []};
break;
case 89:
this.$ = {Nombre : "LISTA_ASIGN_ARRAY", vector : [$$[$0-2],$$[$0]]};
break;
case 90:
this.$ = {Nombre : "LISTA_ASIGN_ARRAY", vector : [$$[$0]]};
break;
case 94: case 95:
this.$ = {Nombre : "VARIABLES" , vector : [{Nombre:$$[$0-2] , vector: []},$$[$0-1]]};
break;
case 96:
this.$ = { Nombre: "LISTADO_VAR" , vector : [$$[$0-2],$$[$0]]};
break;
case 97:
this.$ = { Nombre: "LISTADO_VAR" , vector : [$$[$0]]};
break;
case 98:
this.$ = {Nombre : "VARIABLE" , vector : [{Nombre : $$[$0] , vector : []}]};
break;
case 99: case 101:
this.$ = {Nombre : "VARIABLE" , vector : [{Nombre : $$[$0-2] , vector : []},$$[$0]]};
break;
case 100:
this.$ = {Nombre : "VARIABLE" , vector : [{Nombre : $$[$0-4] , vector : []},$$[$0-2],$$[$0]]};
break;
case 102:
this.$ = {Nombre : "ARRAY" , vector : [{Nombre : $$[$0-4] , vector : []},$$[$0-1]]};
break;
case 103:
this.$ = {Nombre : "ARRAY" , vector : [{Nombre : $$[$0-4] , vector : []},$$[$0-2]]};
break;
case 104:
this.$ = {Nombre : "ARRAY" , vector : [{Nombre : $$[$0-8] , vector : []},$$[$0-6],$$[$0-1]]};
break;
case 105:
this.$ = {Nombre : "TYPE" ,vector : [{Nombre : $$[$0-6] , vector : []},$$[$0-4],$$[$0-1]]};
break;
case 106:
this.$ = {Nombre : "TYPE" ,vector : [{Nombre : $$[$0-4] , vector : []},$$[$0-1]]};
break;
case 107:
this.$ = {Nombre : "LLAMADA_FUNC", vector : [{Nombre : $$[$0-4], vector : []},$$[$0-2]]};
break;
case 108:
this.$ = {Nombre : "LLAMADA_FUNC", vector : [$$[$0-5],{Nombre : $$[$0-3] , vector : []}]};
break;
case 109:
this.$ = {Nombre : "PARAMETROS_FUNC" , vector : [$$[$0-2],$$[$0]] };
break;
case 110:
this.$ = {Nombre : "PARAMETROS_FUNC" , vector : [$$[$0]] };
break;
case 111:
this.$ = {Nombre : "PARAMETROS_FUNC" , vector : [] };
break;
case 113:
this.$ = {Nombre : "PARAM" , vector : []};
break;
case 114:
this.$ = {Nombre : "LISTA_PARAMETROS" , vector : [$$[$0-2],$$[$0]]};
break;
case 115:
this.$ = {Nombre : "LISTA_PARAMETROS" , vector : [$$[$0]]};
break;
case 116:
this.$ = {Nombre : "PARAMETROS" , vector : [{Nombre: $$[$0-2] , vector : []}, $$[$0]]};
break;
case 117:
this.$ = {Nombre : "PARAMETROS" , vector : [{Nombre: $$[$0-4] , vector : []}, $$[$0-2],$$[$0]]};
break;
case 118:
this.$ = {Nombre : "PARAMETROS_OPCIONALES" , vector : [{Nombre: $$[$0-3] , vector : []}, $$[$0]]};
break;
case 119:
this.$ = {Nombre: "TYPES" , vector:[{Nombre: $$[$0-4] ,vector:[]},$$[$0-1]]};
break;
case 120:
this.$ = {Nombre: "LISTA_TYPES" , vector : [$$[$0-2],$$[$0]]};
break;
case 121:
this.$ = {Nombre: "LISTA_TYPES" , vector : [$$[$0]]};
break;
case 122:
this.$ = {Nombre: "CONTENIDO_TYPES", vector : [{Nombre: $$[$0-2] ,vector:[]},$$[$0]] };
break;
case 123:
this.$ = {Nombre: "CONTENIDO_TYPES", vector : [{Nombre: $$[$0-4] ,vector:[]},{Nombre: $$[$0-2] ,vector:[]}] };
break;
case 128:
this.$ = {Nombre : "LISTA_DECLARACION_TYPES", vector : [$$[$0-2],$$[$0]]};
break;
case 129:
this.$ = {Nombre : "LISTA_DECLARACION_TYPES", vector : [$$[$0]]};
break;
case 130:
this.$ = { Nombre : "CONTENIDO_DECLARACION_TYPES", vector : [{ Nombre : $$[$0-2] , vector : []},$$[$0]]};
break;
case 133: case 134: case 135: case 136: case 137:
this.$ = {Nombre: "TIPOS_DE_DATO" , vector : [{Nombre: $$[$0] , vector : []}]};
break;
case 138:
this.$=$$[$0];
break;
case 139:
this.$ = {Nombre : "TIPAR_FUNCION" ,vector:[]};
break;
case 140:
this.$ = {Nombre : "ATRIBUTOS" ,vector:[$$[$0-2],$$[$0]]};
break;
case 141:
this.$ = {Nombre : "ATRIBUTOS" ,vector:[$$[$0]]};
break;
case 142:
this.$ = {Nombre: "CONT_ATRIBUTOS" , vector : [{Nombre: $$[$0-3] , vector : []},$$[$0-1]]};
break;
case 143: case 161: case 162: case 163: case 164: case 165:
this.$ = {Nombre: $$[$0] , vector : []};
break;
case 144: case 145: case 146: case 147: case 148: case 149: case 150: case 151: case 152: case 153: case 154: case 155: case 156: case 157:
 this.$ = {Nombre:"EXPRESION_G",vector : [$$[$0-2], {Nombre: $$[$0-1] , vector : []},$$[$0]]}; 
break;
case 158: case 159:
 this.$ = {Nombre:"EXPRESION_G",vector : [{Nombre: $$[$0-1] , vector : []},$$[$0]]}; 
break;
case 160:
 this.$ = {Nombre:"EXPRESION_G",vector : [$$[$0]]}; 
break;
case 166:
this.$ = {Nombre: "LLAMADA_FUNCION",vector : [{Nombre : $$[$0-2], vector : []}]};
break;
case 167:
this.$ = {Nombre: "LLAMADA_FUNCION",vector : [{Nombre : $$[$0-3], vector : []},$$[$0-1]]};
break;
case 170:
this.$ = {Nombre : "FUNCION_LENGTH" , vector : [$$[$0-2] , {Nombre : $$[$0] , vector : []}]};
break;
case 171:
this.$ = {Nombre : "FUNCION_POP"    , vector : [$$[$0-4] , {Nombre : $$[$0-2] , vector : []}]};
break;
case 172:
this.$ = { Nombre : "OPCIONAL" , vector :[$$[$0-2],$$[$0]]} ;
break;
case 173:
this.$ = { Nombre : "OPCIONAL" , vector :[$$[$0]]} ;
break;
}
},
table: [{3:1,4:2,5:[2,3],6:3,7:4,8:5,9:6,10:$V0,11:$V1,20:$V2,24:$V3,26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:$V4,41:$V5,42:$V6,45:26,46:$V7,47:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,70:23,90:$Vf,101:37},{1:[3]},{5:[1,39]},{5:[2,2],7:40,8:5,9:6,10:$V0,11:$V1,20:$V2,24:$V3,26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:$V4,41:$V5,42:$V6,45:26,46:$V7,47:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,70:23,90:$Vf,101:37},o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),{11:[1,41]},{11:[1,42],83:43,84:44},{11:[1,45],83:46,84:44},o($Vh,[2,16]),o($Vh,[2,17]),o($Vh,[2,37],{29:47,44:[1,48]}),o($Vh,[2,19]),o($Vh,[2,20]),o($Vh,[2,21]),o($Vh,[2,22]),o($Vh,[2,23]),o($Vh,[2,24]),o($Vh,[2,25]),o($Vh,[2,26]),o($Vh,[2,27]),o($Vh,[2,28]),{21:[1,49],55:[1,52],63:[1,50],64:[1,51]},{11:$Vi,70:53,101:37},{11:$Vi,70:55,101:37},o($Vj,[2,34]),{12:[1,56]},{55:[1,57]},{12:[1,58]},{15:[1,59]},{12:[1,60]},{23:[1,61]},{23:[1,62]},{11:$Vk,12:$Vl,23:[1,63],43:64,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},o([21,55,63,64],$Vt,{12:[1,76],77:$Vu}),{11:[1,78]},o($Vv,[2,141]),{12:[1,79]},{1:[2,1]},o($Vg,[2,4]),{12:[1,80]},o($Vw,$Vx,{18:$Vy,21:[1,81]}),{23:[1,83],76:$Vz},o($Vw,[2,97]),o($Vw,$Vx,{18:$Vy,21:[1,85]}),{23:[1,86],76:$Vz},o($Vh,[2,18]),{15:[1,88],45:87,46:$V7},{11:$Vk,12:$Vl,15:$VA,43:90,70:75,71:89,77:$VB,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{23:$VC,72:93,74:94,75:95,76:$VD},{23:$VC,72:97,74:94,75:95,76:$VD},{11:$Vi,73:[1,98],86:[1,99],101:100},{23:$VC,55:$VE,72:101,74:94,75:95,76:$VD},o($Vv,$Vt,{77:$Vu}),{23:$VC,55:$VE,72:103,74:94,75:95,76:$VD},{11:$Vk,12:$Vl,43:104,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{56:[1,105]},{11:$Vk,12:$Vl,43:106,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{9:109,11:$V1,16:107,17:$VF,20:$VG,24:$VH,25:108,26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:$V4,41:$V5,42:$V6,45:26,46:$V7,47:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,70:23,90:$Vf,101:37},{11:[1,116],20:[1,115],24:[1,117],61:112,66:114,68:113},o($Vh,[2,29]),o($Vh,[2,30]),o($Vh,[2,31]),{23:[1,118],102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},{11:$Vk,12:$Vl,70:75,101:37,116:133,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{11:$Vk,12:$Vl,70:75,101:37,116:134,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},o($VW,[2,160]),o($VW,[2,161]),o($VW,[2,162]),o($VW,[2,163]),o($VW,[2,164]),o($VW,[2,165]),o([14,17,18,23,55,76,79,102,103,104,105,106,107,108,109,110,111,112,113,114,115],$Vt,{12:[1,135],77:$Vu}),{11:$Vk,12:$Vl,43:136,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},o($VW,[2,169],{55:[1,137]}),o($VX,[2,111],{101:37,116:67,70:75,85:138,43:139,11:$Vk,12:$Vl,111:$Vm,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs}),{11:$Vk,12:$Vl,43:140,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{21:[1,141]},{11:$Vk,12:$Vl,43:142,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{11:$VY,13:143,14:$VZ,87:144,88:145},{10:[1,147],11:$Vk,12:$Vl,15:$V_,43:148,70:75,77:$V$,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{11:$V01,19:151,97:$V11,98:$V21,99:$V31,100:$V41},o($Vh,[2,94]),{11:$V51,84:157},{10:[1,159],11:$Vk,12:$Vl,15:$V_,43:148,70:75,77:$V$,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},o($Vh,[2,95]),o($Vj,[2,33]),{9:109,11:$V1,16:160,17:$VF,20:$VG,24:$VH,25:108,26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:$V4,41:$V5,42:$V6,45:26,46:$V7,47:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,70:23,90:$Vf,101:37},{23:[1,161]},o($V61,[2,84],{102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),{11:$Vk,12:$Vl,15:$V71,43:165,70:75,77:$V81,78:162,79:$V91,81:163,82:164,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{11:$Va1,80:168,96:169},{23:[1,171]},{23:[2,75],75:172,76:$VD},o($Vw,[2,78]),{11:[1,173],63:[1,174],64:[1,175]},{23:[1,176]},{12:[1,177]},{12:[1,178]},o($Vv,[2,140]),{23:[1,179]},{11:$Vi,101:100},{23:[1,180]},{14:[1,181],102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},{12:[1,182]},{14:[1,183],102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},{17:[1,184]},o($Vb1,[2,12],{26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,70:23,45:26,101:37,9:185,11:$V1,20:$VG,24:$VH,40:$V4,41:$V5,42:$V6,46:$V7,47:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,90:$Vf}),o($Vc1,[2,15]),{11:$V51,83:43,84:44},{11:$V51,83:46,84:44},{11:$Vk,12:$Vl,43:186,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{14:[1,187]},{14:[1,188]},{11:[1,189]},{21:[1,191],23:[1,190],67:[1,193],69:[1,192]},{11:[1,194]},o($Vh,[2,32]),{11:$Vk,12:$Vl,43:195,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{11:$Vk,12:$Vl,43:196,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{11:$Vk,12:$Vl,43:197,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{11:$Vk,12:$Vl,43:198,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{11:$Vk,12:$Vl,43:199,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{11:$Vk,12:$Vl,43:200,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{11:$Vk,12:$Vl,43:201,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{11:$Vk,12:$Vl,43:202,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{11:$Vk,12:$Vl,43:203,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{11:$Vk,12:$Vl,43:204,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{11:$Vk,12:$Vl,43:205,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{11:$Vk,12:$Vl,43:206,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{11:$Vk,12:$Vl,43:207,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{11:$Vk,12:$Vl,43:208,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},o($VW,[2,158]),o($VW,[2,159]),{11:$Vk,12:$Vl,14:[1,209],43:211,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs,123:210},{14:[1,212],102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},{11:$Vi,86:[1,214],101:100,124:[1,213]},{14:[1,215],76:[1,216]},o($VX,[2,110],{102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),{79:[1,217],102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},{15:[1,218]},{14:[1,219],102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},{14:[1,220]},{14:[2,112],76:[1,221]},o($VX,[2,115]),{18:[1,222],89:[1,223]},{12:[1,224]},o($Vw,[2,101],{102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),{11:$Vk,12:$Vl,15:$V71,43:165,70:75,77:$V81,78:225,79:$V91,81:163,82:164,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{11:$Va1,80:226,96:169},o($Vw,[2,99],{21:[1,227],77:[1,228]}),o($Vd1,[2,133]),o($Vd1,[2,134]),o($Vd1,[2,135]),o($Vd1,[2,136]),o([14,15,21,23,76,77],$Ve1),o($Vw,[2,96]),o($Vw,$Vx,{18:$Vy,21:[1,229]}),{12:[1,230]},{17:[1,231]},o($Vh,[2,69]),{79:[1,232]},{76:[1,233],79:[2,87]},o($Vf1,[2,90]),o($Vf1,[2,91],{102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),{11:$Vk,12:$Vl,15:$V71,43:165,70:75,77:$V81,78:234,79:$V91,81:163,82:164,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{11:$Va1,80:235,96:169},{17:[1,236],23:$Vg1,76:$Vh1,95:237},o($Vi1,[2,129]),{18:[1,240]},o($Vh,[2,70]),o($Vw,[2,77]),{21:[1,241],63:[1,242],64:[1,243]},{11:[1,244]},{11:[1,245]},o($Vh,[2,72]),{11:$Vk,12:$Vl,15:$VA,43:90,70:75,71:246,77:$VB,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{14:[1,247]},o($Vh,[2,71]),o($Vh,[2,73]),{15:[1,248]},{11:$Vk,12:$Vl,14:[2,48],43:250,57:249,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{15:[1,251]},{58:[1,252]},o($Vc1,[2,14]),{23:[1,253],102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},{15:[1,254]},{15:[1,255]},{18:[1,256],21:[1,257],67:[1,259],69:[1,258]},o($Vj1,[2,54]),{11:$Vk,12:$Vl,43:260,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{11:[1,261]},{11:[1,262]},{67:[1,264],69:[1,263]},o($Vk1,[2,144],{104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),o($Vk1,[2,145],{104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),o($Vl1,[2,146],{110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),o($Vl1,[2,147],{110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),o($Vl1,[2,148],{110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),o($Vl1,[2,149],{110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),o($Vl1,[2,150],{110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),o($Vl1,[2,151],{110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),o($Vm1,[2,152],{112:$VS,113:$VT,114:$VU,115:$VV}),o($Vm1,[2,153],{112:$VS,113:$VT,114:$VU,115:$VV}),o($Vn1,[2,154],{114:$VU,115:$VV}),o($Vn1,[2,155],{114:$VU,115:$VV}),o($VW,[2,156]),o($VW,[2,157]),o($VW,[2,166]),{14:[1,265],76:[1,266]},o($VX,[2,173],{102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),o($VW,[2,168]),o($VW,[2,170]),{12:[1,267]},{23:[1,268]},{11:$Vk,12:$Vl,43:269,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},o($Vv,[2,142]),{11:$Vo1,91:270,94:271},{15:[1,273]},{15:[1,274],18:[1,275]},{11:$VY,88:276},{11:$V01,19:277,97:$V11,98:$V21,99:$V31,100:$V41},{18:[1,278]},{11:$VY,13:279,14:$VZ,87:144,88:145},{79:[1,280]},{17:[1,281],23:$Vg1,76:$Vh1,95:237},{11:$Vk,12:$Vl,15:[1,283],43:282,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{79:[1,284]},{11:$Vk,12:$Vl,15:$V_,43:148,70:75,77:$V$,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{11:$VY,13:285,14:$VZ,87:144,88:145},o($Vh,[2,36]),o($V61,[2,85]),{11:$Vk,12:$Vl,15:$V71,43:165,70:75,77:$V81,82:286,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{79:[1,287]},{17:[1,288],23:$Vg1,76:$Vh1,95:237},o($V61,[2,86]),{11:$Va1,96:289},{11:[2,131]},{11:[2,132]},{11:$Vk,12:$Vl,15:$VA,43:90,70:75,71:290,77:$VB,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{11:$Vk,12:$Vl,43:291,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},o($Vw,[2,80]),o($Vw,[2,82]),o($Vw,[2,81]),o($Vw,[2,83]),{14:[1,292]},{23:[1,293]},o($Vp1,[2,40],{48:294,50:295,51:296,52:$Vq1}),{14:[1,298]},{14:[2,47],102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},{9:109,11:$V1,16:299,17:$VF,20:$VG,24:$VH,25:108,26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:$V4,41:$V5,42:$V6,45:26,46:$V7,47:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,70:23,90:$Vf,101:37},{12:[1,300]},{11:[1,302],62:301,63:[1,303],64:[1,304]},{9:109,11:$V1,16:305,17:$VF,20:$VG,24:$VH,25:108,26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:$V4,41:$V5,42:$V6,45:26,46:$V7,47:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,70:23,90:$Vf,101:37},{9:109,11:$V1,16:306,17:$VF,20:$VG,24:$VH,25:108,26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:$V4,41:$V5,42:$V6,45:26,46:$V7,47:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,70:23,90:$Vf,101:37},{11:$V01,19:307,97:$V11,98:$V21,99:$V31,100:$V41},{11:$Vk,12:$Vl,43:308,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{11:[1,309]},{11:[1,310]},{23:[1,311],102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},{14:[2,68]},{14:[2,64]},{11:[1,312]},{11:[1,313]},o($VW,[2,167]),{11:$Vk,12:$Vl,43:314,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{14:[1,315]},o($Vh,[2,107]),o($VX,[2,109],{102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),{17:[1,318],23:[1,320],76:[1,319],92:316,93:317},o($Vi1,[2,121]),{18:[1,321]},{9:109,11:$V1,16:322,17:$VF,20:$VG,24:$VH,25:108,26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:$V4,41:$V5,42:$V6,45:26,46:$V7,47:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,70:23,90:$Vf,101:37},{9:109,11:$V1,16:323,17:$VF,20:$VG,24:$VH,25:108,26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:$V4,41:$V5,42:$V6,45:26,46:$V7,47:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,70:23,90:$Vf,101:37},{11:$V01,19:324,97:$V11,98:$V21,99:$V31,100:$V41},o($VX,[2,114]),o($VX,[2,116],{21:[1,325]}),{11:$V01,19:326,97:$V11,98:$V21,99:$V31,100:$V41},{14:[1,327]},o($Vw,[2,102]),o($Vw,[2,106]),o($Vw,[2,100],{102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),{11:$Va1,80:328,96:169},o($Vw,[2,103],{21:[1,329]}),{14:[1,330]},o($Vf1,[2,89]),o($Vf1,[2,92]),o($Vf1,[2,93]),o($Vi1,[2,128]),o($Vi1,[2,130]),o($Vw,[2,79],{102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),{23:[1,331]},o($Vh,[2,108]),{17:[2,45],49:332,53:[1,333]},o($Vp1,[2,39],{51:334,52:$Vq1}),o($Vb1,[2,42]),{11:$Vk,12:$Vl,43:335,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{23:[1,336]},{17:[1,337]},{11:$Vk,12:$Vl,43:338,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{14:[1,339]},{21:[1,340],63:[1,341],64:[1,342]},{11:[1,343]},{65:[1,344]},{17:[1,345]},{17:[1,346]},{21:[1,347]},{23:[1,348],102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},{14:[2,67]},{14:[2,63]},o($Vj1,[2,55]),{14:[2,66]},{14:[2,62]},o($VX,[2,172],{102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),o($VW,[2,171]),o($Vh,[2,119]),{11:$Vo1,94:349},o($Vh,[2,127],{23:[1,350]}),{11:[2,124]},{11:[2,125]},{11:[1,352],19:351,97:$V11,98:$V21,99:$V31,100:$V41},{17:[1,353]},{17:[1,354]},{15:[1,355]},{11:$Vk,12:$Vl,43:356,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},o($VX,[2,118]),{15:$Vr1,18:$Vs1,22:357},{17:[1,359],23:$Vg1,76:$Vh1,95:237},{77:[1,360]},{15:$Vr1,18:$Vs1,22:361},o($Vh,[2,74]),{17:[1,362]},{18:[1,363]},o($Vb1,[2,41]),{18:[1,364],102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},o($Vh,[2,46]),o($Vh,[2,49]),{14:[1,365],102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},{15:[1,366]},{11:$Vk,12:$Vl,43:367,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{14:[2,57]},{14:[2,59]},{14:[2,58]},{14:[2,60]},o($Vh,[2,65]),o($Vh,[2,61]),{11:$Vk,12:$Vl,43:368,70:75,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},o($Vj1,[2,53]),o($Vi1,[2,120]),o($Vh,[2,126]),o($Vi1,[2,122]),o($Vi1,$Ve1,{77:[1,369]}),o($Vj,[2,35]),o($Vg,[2,8]),{9:109,11:$V1,16:370,17:$VF,20:$VG,24:$VH,25:108,26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:$V4,41:$V5,42:$V6,45:26,46:$V7,47:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,70:23,90:$Vf,101:37},o($VX,[2,117],{102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV}),{15:[1,371]},{11:$V01,19:372,97:$V11,98:$V21,99:$V31,100:$V41},o($Vw,[2,105]),{11:$Vk,12:$Vl,15:$V71,43:165,70:75,77:$V81,78:373,79:$V91,81:163,82:164,101:37,111:$Vm,116:67,117:$Vn,118:$Vo,119:$Vp,120:$Vq,121:$Vr,122:$Vs},{15:[1,374]},o($Vh,[2,38]),{9:109,11:$V1,16:375,17:$VF,20:$VG,24:$VH,25:108,26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:$V4,41:$V5,42:$V6,45:26,46:$V7,47:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,70:23,90:$Vf,101:37},o($Vb1,$VF,{26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,70:23,45:26,101:37,25:108,9:109,16:376,11:$V1,20:$VG,24:$VH,40:$V4,41:$V5,42:$V6,46:$V7,47:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,90:$Vf}),{23:[1,377]},{9:109,11:$V1,16:378,17:$VF,20:$VG,24:$VH,25:108,26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:$V4,41:$V5,42:$V6,45:26,46:$V7,47:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,70:23,90:$Vf,101:37},{14:[2,56],102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},{23:[1,379],102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU,115:$VV},{79:[1,380]},{17:[1,381]},{9:109,11:$V1,16:382,17:$VF,20:$VG,24:$VH,25:108,26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:$V4,41:$V5,42:$V6,45:26,46:$V7,47:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,70:23,90:$Vf,101:37},{15:[2,138]},{79:[1,383]},{9:109,11:$V1,16:384,17:$VF,20:$VG,24:$VH,25:108,26:10,27:11,28:12,30:13,31:14,32:15,33:16,34:17,35:18,36:19,37:20,38:21,39:22,40:$V4,41:$V5,42:$V6,45:26,46:$V7,47:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,70:23,90:$Vf,101:37},{17:[2,44]},o($Vb1,[2,43]),o($Vh,[2,50]),{17:[1,385]},o($Vj1,[2,52]),o($Vi1,[2,123]),o($Vg,[2,9]),{17:[1,386]},o($Vw,[2,104]),{17:[1,387]},o($Vh,[2,51]),{23:[1,388]},{23:[1,389]},o($Vg,[2,10]),o($Vg,[2,11])],
defaultActions: {39:[2,1],238:[2,131],239:[2,132],261:[2,68],262:[2,64],309:[2,67],310:[2,63],312:[2,66],313:[2,62],319:[2,124],320:[2,125],341:[2,57],342:[2,59],343:[2,58],344:[2,60],372:[2,138],375:[2,44]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};



let ind = 0;
function graficar(arbol){
    let graphviz = "", nodo1 = "";
    nodo1 = 'nodo' + ind++;
    graphviz +=  nodo1 + '[label="' + arbol.Nombre + '"];\n';
    arbol.vector.forEach(function(elemento){
        let nodo2 = 'nodo' + ind;
        graphviz += nodo1 + '->' + nodo2 + ';\n';
        graphviz += graficar(elemento);
    });
    return graphviz;
}

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"yylineno":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* salta espacios en blanco */
break;
case 1:/* comentario simple*/
break;
case 2:/*comentario multilinea*/
break;
case 3:  return 122; 
break;
case 4:  return 122; 
break;
case 5:  return 122; 
break;
case 6:  return 97;  
break;
case 7:  return 98; 
break;
case 8:  return 99;  
break;
case 9:  return 90;    
break;
case 10:  return 100;    
break;
case 11:  return 20;   
break;
case 12:  return 24; 
break;
case 13:  return 'R_Array'; 
break;
case 14:  return 73;  
break;
case 15:  return 86;   
break;
case 16:  return 124;
break;
case 17:  return 10;
break;
case 18:return 46;
break;
case 19:return 44;
break;
case 20:return 47;
break;
case 21:return 52;
break;
case 22:return 53;
break;
case 23:return 60;
break;
case 24:return 67;
break;
case 25:return 69;
break;
case 26:return 58;
break;
case 27:return 59;
break;
case 28:return 40;
break;
case 29:return 41;
break;
case 30:return 42;
break;
case 31:return 54;
break;
case 32:return 56;
break;
case 33:return 120;
break;
case 34:return 121;
break;
case 35:return 'R_Undefined';
break;
case 36:return 63;
break;
case 37:return 64;
break;
case 38:return 110;
break;
case 39:return 111;
break;
case 40:return 114;
break;
case 41:return 112;
break;
case 42:return 113;
break;
case 43:return 115;
break;
case 44:return 107;
break;
case 45:return 105;
break;
case 46:return 104;
break;
case 47:return 21;
break;
case 48:return 109;
break;
case 49:return 108;
break;
case 50:return 106;
break;
case 51:return 117;
break;
case 52:return 102;
break;
case 53:return 103;
break;
case 54:return 18;
break;
case 55:return 23;
break;
case 56:return 15;
break;
case 57:return 17;
break;
case 58:return 12;
break;
case 59:return 14;
break;
case 60:return 55;
break;
case 61:return 'S_ComillaSimple';
break;
case 62:return 76;
break;
case 63:return 'S_ComillaDoble';
break;
case 64:return 89;
break;
case 65:return 77;
break;
case 66:return 79;
break;
case 67:return 118;
break;
case 68:return 119;
break;
case 69:return 11;
break;
case 70:  return 5; 
break;
case 71:console.error("error lexico: " + yy_.yytext)
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[\"][^\\\"]*([\\][\\\"ntr][^\\\"]*)*[\"])/,/^(?:[\'][^\\\']*([\\][\\\'ntr][^\\\']*)*[\'])/,/^(?:[\`][^\\\`]*([\\][\\\`ntr][^\\\`]*)*[\`])/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:string\b)/,/^(?:type\b)/,/^(?:void\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:Array\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:undefined\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?::)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:\\')/,/^(?:,)/,/^(?:")/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?:[0-9]+\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = AnalisisLS;
exports.Parser = AnalisisLS.Parser;
exports.parse = function () { return AnalisisLS.parse.apply(AnalisisLS, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}