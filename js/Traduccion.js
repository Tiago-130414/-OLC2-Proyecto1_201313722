/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Traduccion = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,35],$V2=[1,8],$V3=[1,9],$V4=[1,32],$V5=[1,33],$V6=[1,34],$V7=[1,38],$V8=[1,27],$V9=[1,28],$Va=[1,29],$Vb=[1,30],$Vc=[1,31],$Vd=[1,24],$Ve=[1,25],$Vf=[1,36],$Vg=[2,6],$Vh=[5,11,12,21,25,41,42,43,47,48,55,59,60,61,64,65,94],$Vi=[5,11,12,18,21,25,41,42,43,47,48,53,54,55,59,60,61,64,65,94],$Vj=[1,55],$Vk=[5,11,12,18,21,25,41,42,43,45,47,48,53,54,55,59,60,61,64,65,94],$Vl=[1,75],$Vm=[1,76],$Vn=[1,68],$Vo=[1,67],$Vp=[1,69],$Vq=[1,70],$Vr=[1,71],$Vs=[1,72],$Vt=[1,73],$Vu=[1,74],$Vv=[1,77],$Vw=[2,150],$Vx=[1,80],$Vy=[15,18,19,22,24,56,64,65,77,80,106,107,108,109,110,111,112,113,114,115,116,117,118,119],$Vz=[24,77],$VA=[2,99],$VB=[1,86],$VC=[1,88],$VD=[1,96],$VE=[1,95],$VF=[2,77],$VG=[1,100],$VH=[1,106],$VI=[2,14],$VJ=[1,114],$VK=[1,115],$VL=[1,123],$VM=[1,124],$VN=[1,125],$VO=[1,126],$VP=[1,127],$VQ=[1,128],$VR=[1,129],$VS=[1,130],$VT=[1,131],$VU=[1,132],$VV=[1,133],$VW=[1,134],$VX=[1,135],$VY=[1,136],$VZ=[15,18,19,24,77,80,106,107,108,109,110,111,112,113,114,115,116,117,118,119],$V_=[15,18,19,24,64,65,77,80,106,107,108,109,110,111,112,113,114,115,116,117,118,119],$V$=[15,77],$V01=[1,154],$V11=[2,120],$V21=[1,158],$V31=[1,157],$V41=[1,164],$V51=[1,160],$V61=[1,161],$V71=[1,162],$V81=[1,163],$V91=[1,166],$Va1=[15,18,24,77],$Vb1=[1,175],$Vc1=[1,174],$Vd1=[2,89],$Ve1=[1,178],$Vf1=[18,53,54],$Vg1=[12,18,21,25,41,42,43,47,48,53,54,55,59,60,61,64,65,94],$Vh1=[15,16,18,22,24,77,78],$Vi1=[2,144],$Vj1=[77,80],$Vk1=[1,247],$Vl1=[1,246],$Vm1=[18,24,77],$Vn1=[12,13,64,65,115,121,122,123,124,125,127],$Vo1=[15,18,19,24,77,80,106,107],$Vp1=[15,18,19,24,77,80,106,107,108,109,110,111,112,113],$Vq1=[15,18,19,24,77,80,106,107,108,109,110,111,112,113,114,115],$Vr1=[15,18,19,24,77,80,106,107,108,109,110,111,112,113,114,115,116,117],$Vs1=[1,280],$Vt1=[18,54],$Vu1=[1,305],$Vv1=[2,146],$Vw1=[1,366];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CONT":4,"EOF":5,"LISTA_CONTENIDO":6,"CONTENIDO":7,"LISTA_CONTENIDO_PRIM":8,"FUNCIONES":9,"ESTRUCTURAS_DE_CONTROL":10,"R_Funcion":11,"Identificador":12,"S_ParentesisAbre":13,"PARAM":14,"S_ParentesisCierra":15,"S_LlaveAbre":16,"EDD":17,"S_LlaveCierra":18,"S_DosPuntos":19,"TIPOS_DE_DATO":20,"R_Let":21,"S_Igual":22,"TIPAR_FUNCION":23,"S_PuntoComa":24,"R_Const":25,"LISTADO_ESTRUCTURAS":26,"VARIABLES":27,"ASIGNACION":28,"LISTADO_IF":29,"ELSE":30,"SWITCH":31,"IMPRIMIR":32,"WHILE":33,"DO_WHILE":34,"FOR":35,"FOR_OF":36,"FOR_IN":37,"SENTENCIAS_TRANSFERENCIA":38,"LLAMADA_FUNC":39,"TYPES":40,"R_Break":41,"R_Continue":42,"R_Return":43,"EXPRESION_G":44,"R_Else":45,"IF":46,"R_If":47,"R_Switch":48,"CASE":49,"DEFINIR_DEFAULT":50,"LISTA_CASE":51,"DEFINIR_CASE":52,"R_Case":53,"R_Default":54,"R_Console":55,"S_Punto":56,"R_Log":57,"FUNC":58,"R_While":59,"R_Do":60,"R_For":61,"CONT_FOR":62,"FIN_FOR":63,"OP_Incremento":64,"OP_Decremento":65,"IdentificadorG":66,"CONT_FOR_IN":67,"R_In":68,"CONT_FOR_OF":69,"R_Of":70,"ATRIBUTOS":71,"LISTA_DE_ASIGNACIONES":72,"COMPLETAR_ASIGNACION":73,"R_Push":74,"LISTADO_ASIGNACION":75,"CONTENIDO_ASIGNACION":76,"S_Coma":77,"S_CorcheteAbre":78,"CONT_ASIG_ARRAY":79,"S_CorcheteCierra":80,"LISTA_DECLARACION_TYPES":81,"LISTA_ASIGN_ARRAY":82,"CONT_ARRAY_ASIGN_VV":83,"LISTADO_VAR":84,"CONT_VAR":85,"CONTENIDO_ARRAY":86,"LISTADO_ARRAY":87,"CONT_ARR":88,"PARAMETROS_FUNC":89,"R_Pop":90,"LISTA_PARAMETROS":91,"PARAMETROS":92,"S_Interrogacion":93,"T_Type":94,"LISTA_TYPES":95,"FIN_TYPES":96,"SEPARADOR":97,"CONTENIDO_TYPES":98,"SEPARADOR_DECLARACION_TYPES":99,"CONTENIDO_DECLARACION_TYPES":100,"T_Number":101,"T_Boolean":102,"T_String":103,"T_Void":104,"CONT_ATRIBUTOS":105,"LOG_Concatenar":106,"LOG_OR":107,"REL_IgualIgual":108,"REL_MayorIgualQue":109,"REL_MayorQue":110,"REL_MenorIgualQue":111,"REL_MenorQue":112,"REL_Distinto":113,"OP_Mas":114,"OP_Menos":115,"OP_Multiplicacion":116,"OP_Division":117,"OP_Exponenciacion":118,"OP_Modulo":119,"CONTENIDO_EXPRESION":120,"LOG_Not":121,"Entero":122,"Decimal":123,"R_True":124,"R_False":125,"OPCIONAL":126,"Cadena":127,"R_Length":128,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"R_Funcion",12:"Identificador",13:"S_ParentesisAbre",15:"S_ParentesisCierra",16:"S_LlaveAbre",18:"S_LlaveCierra",19:"S_DosPuntos",21:"R_Let",22:"S_Igual",24:"S_PuntoComa",25:"R_Const",41:"R_Break",42:"R_Continue",43:"R_Return",45:"R_Else",47:"R_If",48:"R_Switch",53:"R_Case",54:"R_Default",55:"R_Console",56:"S_Punto",57:"R_Log",59:"R_While",60:"R_Do",61:"R_For",64:"OP_Incremento",65:"OP_Decremento",66:"IdentificadorG",68:"R_In",70:"R_Of",74:"R_Push",77:"S_Coma",78:"S_CorcheteAbre",80:"S_CorcheteCierra",90:"R_Pop",93:"S_Interrogacion",94:"T_Type",101:"T_Number",102:"T_Boolean",103:"T_String",104:"T_Void",106:"LOG_Concatenar",107:"LOG_OR",108:"REL_IgualIgual",109:"REL_MayorIgualQue",110:"REL_MayorQue",111:"REL_MenorIgualQue",112:"REL_MenorQue",113:"REL_Distinto",114:"OP_Mas",115:"OP_Menos",116:"OP_Multiplicacion",117:"OP_Division",118:"OP_Exponenciacion",119:"OP_Modulo",121:"LOG_Not",122:"Entero",123:"Decimal",124:"R_True",125:"R_False",127:"Cadena",128:"R_Length"},
productions_: [0,[3,2],[4,1],[4,0],[6,2],[8,2],[8,0],[7,1],[7,1],[9,8],[9,10],[9,12],[9,12],[17,1],[17,0],[26,2],[26,1],[10,1],[10,1],[10,2],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[38,2],[38,2],[38,2],[38,3],[29,3],[29,1],[46,7],[30,4],[30,0],[31,8],[49,1],[49,0],[51,2],[51,1],[52,4],[50,3],[50,0],[32,7],[58,1],[58,0],[33,7],[34,9],[35,10],[62,7],[62,5],[62,2],[62,4],[63,3],[63,2],[63,2],[63,2],[63,2],[37,7],[67,4],[67,4],[67,3],[36,7],[69,4],[69,4],[69,3],[28,4],[28,4],[28,4],[28,4],[28,4],[28,7],[73,1],[73,0],[75,2],[75,1],[76,4],[76,3],[76,3],[76,3],[76,3],[72,1],[72,3],[72,3],[79,1],[79,0],[82,3],[82,1],[83,1],[83,3],[83,3],[27,3],[27,3],[84,3],[84,1],[85,1],[85,3],[85,5],[85,3],[85,5],[85,5],[85,9],[85,7],[85,5],[86,1],[86,0],[87,3],[87,1],[88,3],[88,1],[39,5],[39,6],[89,3],[89,1],[89,0],[14,1],[14,0],[91,3],[91,1],[92,3],[92,5],[92,4],[40,6],[95,3],[95,1],[98,3],[98,5],[97,1],[97,1],[96,2],[96,1],[81,3],[81,1],[100,3],[99,1],[99,1],[20,1],[20,1],[20,1],[20,1],[20,1],[23,2],[23,0],[71,3],[71,1],[105,4],[105,1],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,2],[44,2],[44,2],[44,2],[44,2],[44,2],[44,1],[120,1],[120,1],[120,1],[120,1],[120,3],[120,4],[120,3],[120,1],[120,1],[120,3],[120,5],[126,3],[126,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log(this.$);
break;
case 9:
this.$ = $$[$0-7] + $$[$0-6] +$$[$0-5] +$$[$0-4] +$$[$0-3] +$$[$0-2] 
break;
case 10:
this.$ = $$[$0-9] + $$[$0-8] +$$[$0-7] +$$[$0-6] +$$[$0-5] +$$[$0-4] 
break;
case 11:
this.$ = $$[$0-11] + $$[$0-10] +$$[$0-9] +$$[$0-8] +$$[$0-7] +$$[$0-6] +$$[$0-5]+$$[$0-4]+$$[$0-3]
break;
case 52:
 this.$ = $$[$0-9] + $$[$0-8] + $$[$0-7] + $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 57: case 151: case 152: case 153: case 154: case 155: case 156: case 157: case 158: case 159: case 160: case 161: case 162: case 163: case 164: case 176: case 178: case 183:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 114:
this.$ = $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 115:
this.$ = $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1];
break;
case 116:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 118:
this.$='';
break;
case 121:
this.$ = $$[$0-2] + $$[$0-1]
break;
case 122:
this.$=$$[$0]
break;
case 123:
this.$ = $$[$0-2] + $$[$0-1] +$$[$0]
break;
case 124:
this.$ = $$[$0-4] + $$[$0-3] +$$[$0-2] +$$[$0-1]
break;
case 125:
this.$ = $$[$0-3] + $$[$0-2] +$$[$0-1] +$$[$0]
break;
case 165: case 166: case 169: case 170:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 167: case 168:
 this.$ = $$[$0-1] + $$[$0];
break;
case 177:
 this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
}
},
table: [{3:1,4:2,5:[2,3],6:3,7:4,9:5,10:6,11:$V0,12:$V1,21:$V2,25:$V3,27:10,28:11,29:12,31:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:$V4,42:$V5,43:$V6,46:26,47:$V7,48:$V8,55:$V9,59:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,71:23,94:$Vf,105:37},{1:[3]},{5:[1,39]},{5:[2,2]},{5:$Vg,7:41,8:40,9:5,10:6,11:$V0,12:$V1,21:$V2,25:$V3,27:10,28:11,29:12,31:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:$V4,42:$V5,43:$V6,46:26,47:$V7,48:$V8,55:$V9,59:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,71:23,94:$Vf,105:37},o($Vh,[2,7]),o($Vh,[2,8]),{12:[1,42]},{12:[1,43],84:44,85:45},{12:[1,46],84:47,85:45},o($Vi,[2,17]),o($Vi,[2,18]),o($Vi,[2,38],{30:48,45:[1,49]}),o($Vi,[2,20]),o($Vi,[2,21]),o($Vi,[2,22]),o($Vi,[2,23]),o($Vi,[2,24]),o($Vi,[2,25]),o($Vi,[2,26]),o($Vi,[2,27]),o($Vi,[2,28]),o($Vi,[2,29]),{22:[1,50],56:[1,53],64:[1,51],65:[1,52]},{12:$Vj,71:54,105:37},{12:$Vj,71:56,105:37},o($Vk,[2,35]),{13:[1,57]},{56:[1,58]},{13:[1,59]},{16:[1,60]},{13:[1,61]},{24:[1,62]},{24:[1,63]},{12:$Vl,13:$Vm,24:[1,64],44:65,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},o([22,56,64,65],$Vw,{13:[1,79],78:$Vx}),{12:[1,81]},o($Vy,[2,148]),{13:[1,82]},{1:[2,1]},{5:[2,4]},{5:$Vg,7:41,8:83,9:5,10:6,11:$V0,12:$V1,21:$V2,25:$V3,27:10,28:11,29:12,31:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:$V4,42:$V5,43:$V6,46:26,47:$V7,48:$V8,55:$V9,59:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,71:23,94:$Vf,105:37},{13:[1,84]},o($Vz,$VA,{19:$VB,22:[1,85]}),{24:[1,87],77:$VC},o($Vz,[2,98]),o($Vz,$VA,{19:$VB,22:[1,89]}),{24:[1,90],77:$VC},o($Vi,[2,19]),{16:[1,92],46:91,47:$V7},{12:$Vl,13:$Vm,16:$VD,44:94,64:$Vn,65:$Vo,71:78,72:93,78:$VE,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{24:$VF,73:97,75:98,76:99,77:$VG},{24:$VF,73:101,75:98,76:99,77:$VG},{12:$Vj,74:[1,102],90:[1,103],105:104},{24:$VF,56:$VH,73:105,75:98,76:99,77:$VG},o($Vy,$Vw,{78:$Vx}),{24:$VF,56:$VH,73:107,75:98,76:99,77:$VG},{12:$Vl,13:$Vm,44:108,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{57:[1,109]},{12:$Vl,13:$Vm,44:110,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{10:113,12:$V1,17:111,18:$VI,21:$VJ,25:$VK,26:112,27:10,28:11,29:12,31:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:$V4,42:$V5,43:$V6,46:26,47:$V7,48:$V8,55:$V9,59:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,71:23,94:$Vf,105:37},{12:[1,120],21:[1,119],25:[1,121],62:116,67:118,69:117},o($Vi,[2,30]),o($Vi,[2,31]),o($Vi,[2,32]),{24:[1,122],106:$VL,107:$VM,108:$VN,109:$VO,110:$VP,111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY},o($VZ,[2,171],{64:[1,138],65:[1,137]}),{12:$Vl,13:$Vm,71:78,105:37,120:139,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{12:$Vl,13:$Vm,71:78,105:37,120:140,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{12:$Vl,13:$Vm,71:78,105:37,120:141,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{12:$Vl,13:$Vm,71:78,105:37,120:142,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},o($V_,[2,172]),o($V_,[2,173]),o($V_,[2,174]),o($V_,[2,175]),o([15,18,19,24,56,64,65,77,80,106,107,108,109,110,111,112,113,114,115,116,117,118,119],$Vw,{13:[1,143],78:$Vx}),{12:$Vl,13:$Vm,44:144,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},o($V_,[2,179]),o($V_,[2,180],{56:[1,145]}),o($V$,[2,118],{105:37,120:66,71:78,89:146,44:147,12:$Vl,13:$Vm,64:$Vn,65:$Vo,115:$Vp,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv}),{12:$Vl,13:$Vm,44:148,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{22:[1,149]},{12:$Vl,13:$Vm,44:150,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{5:[2,5]},{12:$V01,14:151,15:$V11,91:152,92:153},{11:[1,155],12:$Vl,13:$Vm,16:$V21,44:156,64:$Vn,65:$Vo,71:78,78:$V31,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{12:$V41,20:159,101:$V51,102:$V61,103:$V71,104:$V81},o($Vi,[2,95]),{12:$V91,85:165},{11:[1,167],12:$Vl,13:$Vm,16:$V21,44:156,64:$Vn,65:$Vo,71:78,78:$V31,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},o($Vi,[2,96]),o($Vk,[2,34]),{10:113,12:$V1,17:168,18:$VI,21:$VJ,25:$VK,26:112,27:10,28:11,29:12,31:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:$V4,42:$V5,43:$V6,46:26,47:$V7,48:$V8,55:$V9,59:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,71:23,94:$Vf,105:37},{24:[1,169]},o($Va1,[2,85],{106:$VL,107:$VM,108:$VN,109:$VO,110:$VP,111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY}),{12:$Vl,13:$Vm,16:$Vb1,44:173,64:$Vn,65:$Vo,71:78,78:$Vc1,79:170,80:$Vd1,82:171,83:172,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{12:$Ve1,81:176,100:177},{24:[1,179]},{24:[2,76],76:180,77:$VG},o($Vz,[2,79]),{12:[1,181],64:[1,182],65:[1,183]},{24:[1,184]},{13:[1,185]},{13:[1,186]},o($Vy,[2,147]),{24:[1,187]},{12:$Vj,105:104},{24:[1,188]},{15:[1,189],106:$VL,107:$VM,108:$VN,109:$VO,110:$VP,111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY},{13:[1,190]},{15:[1,191],106:$VL,107:$VM,108:$VN,109:$VO,110:$VP,111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY},{18:[1,192]},o($Vf1,[2,13],{27:10,28:11,29:12,31:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,71:23,46:26,105:37,10:193,12:$V1,21:$VJ,25:$VK,41:$V4,42:$V5,43:$V6,47:$V7,48:$V8,55:$V9,59:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,94:$Vf}),o($Vg1,[2,16]),{12:$V91,84:44,85:45},{12:$V91,84:47,85:45},{12:$Vl,13:$Vm,44:194,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{15:[1,195]},{15:[1,196]},{12:[1,197]},{22:[1,199],24:[1,198],68:[1,201],70:[1,200]},{12:[1,202]},o($Vi,[2,33]),{12:$Vl,13:$Vm,44:203,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{12:$Vl,13:$Vm,44:204,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{12:$Vl,13:$Vm,44:205,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{12:$Vl,13:$Vm,44:206,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{12:$Vl,13:$Vm,44:207,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{12:$Vl,13:$Vm,44:208,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{12:$Vl,13:$Vm,44:209,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{12:$Vl,13:$Vm,44:210,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{12:$Vl,13:$Vm,44:211,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{12:$Vl,13:$Vm,44:212,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{12:$Vl,13:$Vm,44:213,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{12:$Vl,13:$Vm,44:214,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{12:$Vl,13:$Vm,44:215,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{12:$Vl,13:$Vm,44:216,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},o($VZ,[2,165]),o($VZ,[2,166]),o($VZ,[2,167]),o($VZ,[2,168]),o($VZ,[2,169]),o($VZ,[2,170]),{12:$Vl,13:$Vm,15:[1,217],44:219,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,126:218,127:$Vv},{15:[1,220],106:$VL,107:$VM,108:$VN,109:$VO,110:$VP,111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY},{12:$Vj,90:[1,222],105:104,128:[1,221]},{15:[1,223],77:[1,224]},o($V$,[2,117],{106:$VL,107:$VM,108:$VN,109:$VO,110:$VP,111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY}),{80:[1,225],106:$VL,107:$VM,108:$VN,109:$VO,110:$VP,111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY},{16:[1,226]},{15:[1,227],106:$VL,107:$VM,108:$VN,109:$VO,110:$VP,111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY},{15:[1,228]},{15:[2,119],77:[1,229]},o($V$,[2,122]),{19:[1,230],93:[1,231]},{13:[1,232]},o($Vz,[2,102],{106:$VL,107:$VM,108:$VN,109:$VO,110:$VP,111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY}),{12:$Vl,13:$Vm,16:$Vb1,44:173,64:$Vn,65:$Vo,71:78,78:$Vc1,79:233,80:$Vd1,82:171,83:172,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{12:$Ve1,81:234,100:177},o($Vz,[2,100],{22:[1,235],78:[1,236]}),o($Vh1,[2,140]),o($Vh1,[2,141]),o($Vh1,[2,142]),o($Vh1,[2,143]),o([15,16,22,24,77,78],$Vi1),o($Vz,[2,97]),o($Vz,$VA,{19:$VB,22:[1,237]}),{13:[1,238]},{18:[1,239]},o($Vi,[2,70]),{80:[1,240]},{77:[1,241],80:[2,88]},o($Vj1,[2,91]),o($Vj1,[2,92],{106:$VL,107:$VM,108:$VN,109:$VO,110:$VP,111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY}),{12:$Vl,13:$Vm,16:$Vb1,44:173,64:$Vn,65:$Vo,71:78,78:$Vc1,79:242,80:$Vd1,82:171,83:172,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{12:$Ve1,81:243,100:177},{18:[1,244],24:$Vk1,77:$Vl1,99:245},o($Vm1,[2,136]),{19:[1,248]},o($Vi,[2,71]),o($Vz,[2,78]),{22:[1,249],64:[1,250],65:[1,251]},{12:[1,252]},{12:[1,253]},o($Vi,[2,73]),{12:$Vl,13:$Vm,16:$VD,44:94,64:$Vn,65:$Vo,71:78,72:254,78:$VE,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{15:[1,255]},o($Vi,[2,72]),o($Vi,[2,74]),{16:[1,256]},{12:$Vl,13:$Vm,15:[2,49],44:258,58:257,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{16:[1,259]},{59:[1,260]},o($Vg1,[2,15]),{24:[1,261],106:$VL,107:$VM,108:$VN,109:$VO,110:$VP,111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY},{16:[1,262]},{16:[1,263]},{19:[1,264],22:[1,265],68:[1,267],70:[1,266]},o($Vn1,[2,55]),{12:$Vl,13:$Vm,44:268,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{12:[1,269]},{12:[1,270]},{68:[1,272],70:[1,271]},o($Vo1,[2,151],{108:$VN,109:$VO,110:$VP,111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY}),o($Vo1,[2,152],{108:$VN,109:$VO,110:$VP,111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY}),o($Vp1,[2,153],{114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY}),o($Vp1,[2,154],{114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY}),o($Vp1,[2,155],{114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY}),o($Vp1,[2,156],{114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY}),o($Vp1,[2,157],{114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY}),o($Vp1,[2,158],{114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY}),o($Vq1,[2,159],{116:$VV,117:$VW,118:$VX,119:$VY}),o($Vq1,[2,160],{116:$VV,117:$VW,118:$VX,119:$VY}),o($Vr1,[2,161],{118:$VX,119:$VY}),o($Vr1,[2,162],{118:$VX,119:$VY}),o($VZ,[2,163]),o($VZ,[2,164]),o($V_,[2,176]),{15:[1,273],77:[1,274]},o($V$,[2,184],{106:$VL,107:$VM,108:$VN,109:$VO,110:$VP,111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY}),o($V_,[2,178]),o($V_,[2,181]),{13:[1,275]},{24:[1,276]},{12:$Vl,13:$Vm,44:277,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},o($Vy,[2,149]),{12:$Vs1,95:278,98:279},{16:[1,281]},{16:[1,282],19:[1,283]},{12:$V01,92:284},{12:$V41,20:285,101:$V51,102:$V61,103:$V71,104:$V81},{19:[1,286]},{12:$V01,14:287,15:$V11,91:152,92:153},{80:[1,288]},{18:[1,289],24:$Vk1,77:$Vl1,99:245},{12:$Vl,13:$Vm,16:[1,291],44:290,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{80:[1,292]},{12:$Vl,13:$Vm,16:$V21,44:156,64:$Vn,65:$Vo,71:78,78:$V31,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{12:$V01,14:293,15:$V11,91:152,92:153},o($Vi,[2,37]),o($Va1,[2,86]),{12:$Vl,13:$Vm,16:$Vb1,44:173,64:$Vn,65:$Vo,71:78,78:$Vc1,83:294,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{80:[1,295]},{18:[1,296],24:$Vk1,77:$Vl1,99:245},o($Va1,[2,87]),{12:$Ve1,100:297},{12:[2,138]},{12:[2,139]},{12:$Vl,13:$Vm,16:$VD,44:94,64:$Vn,65:$Vo,71:78,72:298,78:$VE,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{12:$Vl,13:$Vm,44:299,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},o($Vz,[2,81]),o($Vz,[2,83]),o($Vz,[2,82]),o($Vz,[2,84]),{15:[1,300]},{24:[1,301]},o($Vt1,[2,41],{49:302,51:303,52:304,53:$Vu1}),{15:[1,306]},{15:[2,48],106:$VL,107:$VM,108:$VN,109:$VO,110:$VP,111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY},{10:113,12:$V1,17:307,18:$VI,21:$VJ,25:$VK,26:112,27:10,28:11,29:12,31:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:$V4,42:$V5,43:$V6,46:26,47:$V7,48:$V8,55:$V9,59:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,71:23,94:$Vf,105:37},{13:[1,308]},{12:[1,310],63:309,64:[1,311],65:[1,312]},{10:113,12:$V1,17:313,18:$VI,21:$VJ,25:$VK,26:112,27:10,28:11,29:12,31:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:$V4,42:$V5,43:$V6,46:26,47:$V7,48:$V8,55:$V9,59:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,71:23,94:$Vf,105:37},{10:113,12:$V1,17:314,18:$VI,21:$VJ,25:$VK,26:112,27:10,28:11,29:12,31:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:$V4,42:$V5,43:$V6,46:26,47:$V7,48:$V8,55:$V9,59:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,71:23,94:$Vf,105:37},{12:$V41,20:315,101:$V51,102:$V61,103:$V71,104:$V81},{12:$Vl,13:$Vm,44:316,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{12:[1,317]},{12:[1,318]},{24:[1,319],106:$VL,107:$VM,108:$VN,109:$VO,110:$VP,111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY},{15:[2,69]},{15:[2,65]},{12:[1,320]},{12:[1,321]},o($V_,[2,177]),{12:$Vl,13:$Vm,44:322,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{15:[1,323]},o($Vi,[2,114]),o($V$,[2,116],{106:$VL,107:$VM,108:$VN,109:$VO,110:$VP,111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY}),{18:[1,326],24:[1,328],77:[1,327],96:324,97:325},o($Vm1,[2,128]),{19:[1,329]},{10:113,12:$V1,17:330,18:$VI,21:$VJ,25:$VK,26:112,27:10,28:11,29:12,31:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:$V4,42:$V5,43:$V6,46:26,47:$V7,48:$V8,55:$V9,59:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,71:23,94:$Vf,105:37},{10:113,12:$V1,17:331,18:$VI,21:$VJ,25:$VK,26:112,27:10,28:11,29:12,31:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:$V4,42:$V5,43:$V6,46:26,47:$V7,48:$V8,55:$V9,59:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,71:23,94:$Vf,105:37},{12:$V41,20:332,101:$V51,102:$V61,103:$V71,104:$V81},o($V$,[2,121]),o($V$,[2,123],{22:[1,333]}),{12:$V41,20:334,101:$V51,102:$V61,103:$V71,104:$V81},{15:[1,335]},o($Vz,[2,103]),o($Vz,[2,107]),o($Vz,[2,101],{106:$VL,107:$VM,108:$VN,109:$VO,110:$VP,111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY}),{12:$Ve1,81:336,100:177},o($Vz,[2,104],{22:[1,337]}),{15:[1,338]},o($Vj1,[2,90]),o($Vj1,[2,93]),o($Vj1,[2,94]),o($Vm1,[2,135]),o($Vm1,[2,137]),o($Vz,[2,80],{106:$VL,107:$VM,108:$VN,109:$VO,110:$VP,111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY}),{24:[1,339]},o($Vi,[2,115]),{18:[2,46],50:340,54:[1,341]},o($Vt1,[2,40],{52:342,53:$Vu1}),o($Vf1,[2,43]),{12:$Vl,13:$Vm,44:343,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{24:[1,344]},{18:[1,345]},{12:$Vl,13:$Vm,44:346,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{15:[1,347]},{22:[1,348],64:[1,349],65:[1,350]},{12:[1,351]},{66:[1,352]},{18:[1,353]},{18:[1,354]},{22:[1,355]},{24:[1,356],106:$VL,107:$VM,108:$VN,109:$VO,110:$VP,111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY},{15:[2,68]},{15:[2,64]},o($Vn1,[2,56]),{15:[2,67]},{15:[2,63]},o($V$,[2,183],{106:$VL,107:$VM,108:$VN,109:$VO,110:$VP,111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY}),o($V_,[2,182]),o($Vi,[2,126]),{12:$Vs1,98:357},o($Vi,[2,134],{24:[1,358]}),{12:[2,131]},{12:[2,132]},{12:[1,360],20:359,101:$V51,102:$V61,103:$V71,104:$V81},{18:[1,361]},{18:[1,362]},{16:[1,363]},{12:$Vl,13:$Vm,44:364,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},o($V$,[2,125]),{16:$Vv1,19:$Vw1,23:365},{18:[1,367],24:$Vk1,77:$Vl1,99:245},{78:[1,368]},{16:$Vv1,19:$Vw1,23:369},o($Vi,[2,75]),{18:[1,370]},{19:[1,371]},o($Vf1,[2,42]),{19:[1,372],106:$VL,107:$VM,108:$VN,109:$VO,110:$VP,111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY},o($Vi,[2,47]),o($Vi,[2,50]),{15:[1,373],106:$VL,107:$VM,108:$VN,109:$VO,110:$VP,111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY},{16:[1,374]},{12:$Vl,13:$Vm,44:375,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{15:[2,58]},{15:[2,60]},{15:[2,59]},{15:[2,61]},o($Vi,[2,66]),o($Vi,[2,62]),{12:$Vl,13:$Vm,44:376,64:$Vn,65:$Vo,71:78,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},o($Vn1,[2,54]),o($Vm1,[2,127]),o($Vi,[2,133]),o($Vm1,[2,129]),o($Vm1,$Vi1,{78:[1,377]}),o($Vk,[2,36]),o($Vh,[2,9]),{10:113,12:$V1,17:378,18:$VI,21:$VJ,25:$VK,26:112,27:10,28:11,29:12,31:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:$V4,42:$V5,43:$V6,46:26,47:$V7,48:$V8,55:$V9,59:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,71:23,94:$Vf,105:37},o($V$,[2,124],{106:$VL,107:$VM,108:$VN,109:$VO,110:$VP,111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY}),{16:[1,379]},{12:$V41,20:380,101:$V51,102:$V61,103:$V71,104:$V81},o($Vz,[2,106]),{12:$Vl,13:$Vm,16:$Vb1,44:173,64:$Vn,65:$Vo,71:78,78:$Vc1,79:381,80:$Vd1,82:171,83:172,105:37,115:$Vp,120:66,121:$Vq,122:$Vr,123:$Vs,124:$Vt,125:$Vu,127:$Vv},{16:[1,382]},o($Vi,[2,39]),{10:113,12:$V1,17:383,18:$VI,21:$VJ,25:$VK,26:112,27:10,28:11,29:12,31:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:$V4,42:$V5,43:$V6,46:26,47:$V7,48:$V8,55:$V9,59:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,71:23,94:$Vf,105:37},o($Vf1,$VI,{27:10,28:11,29:12,31:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,71:23,46:26,105:37,26:112,10:113,17:384,12:$V1,21:$VJ,25:$VK,41:$V4,42:$V5,43:$V6,47:$V7,48:$V8,55:$V9,59:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,94:$Vf}),{24:[1,385]},{10:113,12:$V1,17:386,18:$VI,21:$VJ,25:$VK,26:112,27:10,28:11,29:12,31:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:$V4,42:$V5,43:$V6,46:26,47:$V7,48:$V8,55:$V9,59:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,71:23,94:$Vf,105:37},{15:[2,57],106:$VL,107:$VM,108:$VN,109:$VO,110:$VP,111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY},{24:[1,387],106:$VL,107:$VM,108:$VN,109:$VO,110:$VP,111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY},{80:[1,388]},{18:[1,389]},{10:113,12:$V1,17:390,18:$VI,21:$VJ,25:$VK,26:112,27:10,28:11,29:12,31:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:$V4,42:$V5,43:$V6,46:26,47:$V7,48:$V8,55:$V9,59:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,71:23,94:$Vf,105:37},{16:[2,145]},{80:[1,391]},{10:113,12:$V1,17:392,18:$VI,21:$VJ,25:$VK,26:112,27:10,28:11,29:12,31:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:$V4,42:$V5,43:$V6,46:26,47:$V7,48:$V8,55:$V9,59:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,71:23,94:$Vf,105:37},{18:[2,45]},o($Vf1,[2,44]),o($Vi,[2,51]),{18:[1,393]},o($Vn1,[2,53]),o($Vm1,[2,130]),o($Vh,[2,10]),{18:[1,394]},o($Vz,[2,105]),{18:[1,395]},o($Vi,[2,52]),{24:[1,396]},{24:[1,397]},o($Vh,[2,11]),o($Vh,[2,12])],
defaultActions: {3:[2,2],39:[2,1],40:[2,4],83:[2,5],246:[2,138],247:[2,139],269:[2,69],270:[2,65],317:[2,68],318:[2,64],320:[2,67],321:[2,63],327:[2,131],328:[2,132],349:[2,58],350:[2,60],351:[2,59],352:[2,61],380:[2,145],383:[2,45]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"yylineno":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* salta espacios en blanco */
break;
case 1:/* comentario simple*/
break;
case 2:/*comentario multilinea*/
break;
case 3:  return 127; 
break;
case 4:  return 127; 
break;
case 5:  return 127; 
break;
case 6:  return 101;  
break;
case 7:  return 102; 
break;
case 8:  return 103;  
break;
case 9:  return 94;    
break;
case 10:  return 104;    
break;
case 11:  return 21;   
break;
case 12:  return 25; 
break;
case 13:  return 'R_Array'; 
break;
case 14:  return 74;  
break;
case 15:  return 90;   
break;
case 16:  return 128;
break;
case 17:  return 11;
break;
case 18:return 47;
break;
case 19:return 45;
break;
case 20:return 48;
break;
case 21:return 53;
break;
case 22:return 54;
break;
case 23:return 61;
break;
case 24:return 68;
break;
case 25:return 70;
break;
case 26:return 59;
break;
case 27:return 60;
break;
case 28:return 41;
break;
case 29:return 42;
break;
case 30:return 43;
break;
case 31:return 55;
break;
case 32:return 57;
break;
case 33:return 124;
break;
case 34:return 125;
break;
case 35:return 'R_Undefined';
break;
case 36:return 64;
break;
case 37:return 65;
break;
case 38:return 114;
break;
case 39:return 115;
break;
case 40:return 118;
break;
case 41:return 116;
break;
case 42:return 117;
break;
case 43:return 119;
break;
case 44:return 111;
break;
case 45:return 109;
break;
case 46:return 108;
break;
case 47:return 22;
break;
case 48:return 113;
break;
case 49:return 112;
break;
case 50:return 110;
break;
case 51:return 121;
break;
case 52:return 106;
break;
case 53:return 107;
break;
case 54:return 19;
break;
case 55:return 24;
break;
case 56:return 16;
break;
case 57:return 18;
break;
case 58:return 13;
break;
case 59:return 15;
break;
case 60:return 56;
break;
case 61:return 'S_ComillaSimple';
break;
case 62:return 77;
break;
case 63:return 'S_ComillaDoble';
break;
case 64:return 93;
break;
case 65:return 78;
break;
case 66:return 80;
break;
case 67:return 123;
break;
case 68:return 122;
break;
case 69:return 12;
break;
case 70:  return 5; 
break;
case 71:console.error("error lexico: " + yy_.yytext)
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[\"][^\\\"]*([\\][\\\"ntr][^\\\"]*)*[\"])/,/^(?:[\'][^\\\']*([\\][\\\'ntr][^\\\']*)*[\'])/,/^(?:[\`][^\\\`]*([\\][\\\`ntr][^\\\`]*)*[\`])/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:string\b)/,/^(?:type\b)/,/^(?:void\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:Array\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:undefined\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?::)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:\\')/,/^(?:,)/,/^(?:")/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Traduccion;
exports.Parser = Traduccion.Parser;
exports.parse = function () { return Traduccion.parse.apply(Traduccion, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}