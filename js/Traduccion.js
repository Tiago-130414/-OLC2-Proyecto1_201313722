/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Traduccion = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[2,3],$V2=[1,8],$V3=[1,36],$V4=[1,9],$V5=[1,10],$V6=[1,33],$V7=[1,34],$V8=[1,35],$V9=[1,39],$Va=[1,28],$Vb=[1,29],$Vc=[1,30],$Vd=[1,31],$Ve=[1,32],$Vf=[1,25],$Vg=[1,26],$Vh=[1,37],$Vi=[5,17],$Vj=[2,6],$Vk=[2,5,11,12,17,20,24,42,43,44,48,49,56,60,61,62,65,66,95],$Vl=[2,5,11,12,17,20,24,42,43,44,48,49,54,55,56,60,61,62,65,66,95],$Vm=[1,56],$Vn=[2,5,11,12,17,20,24,42,43,44,46,48,49,54,55,56,60,61,62,65,66,95],$Vo=[1,76],$Vp=[1,77],$Vq=[1,69],$Vr=[1,68],$Vs=[1,70],$Vt=[1,71],$Vu=[1,72],$Vv=[1,73],$Vw=[1,74],$Vx=[1,75],$Vy=[1,78],$Vz=[2,153],$VA=[1,81],$VB=[15,17,18,21,23,57,65,66,78,81,107,108,109,110,111,112,113,114,115,116,117,118,119,120],$VC=[23,78],$VD=[2,102],$VE=[1,87],$VF=[1,89],$VG=[1,97],$VH=[1,96],$VI=[2,80],$VJ=[1,101],$VK=[1,107],$VL=[1,116],$VM=[2,15],$VN=[1,117],$VO=[1,118],$VP=[1,126],$VQ=[1,127],$VR=[1,128],$VS=[1,129],$VT=[1,130],$VU=[1,131],$VV=[1,132],$VW=[1,133],$VX=[1,134],$VY=[1,135],$VZ=[1,136],$V_=[1,137],$V$=[1,138],$V01=[1,139],$V11=[15,17,18,23,78,81,107,108,109,110,111,112,113,114,115,116,117,118,119,120],$V21=[15,17,18,23,65,66,78,81,107,108,109,110,111,112,113,114,115,116,117,118,119,120],$V31=[15,78],$V41=[1,157],$V51=[2,123],$V61=[1,161],$V71=[1,160],$V81=[1,167],$V91=[1,163],$Va1=[1,164],$Vb1=[1,165],$Vc1=[1,166],$Vd1=[1,169],$Ve1=[15,17,23,78],$Vf1=[1,178],$Vg1=[1,177],$Vh1=[2,92],$Vi1=[1,181],$Vj1=[17,54,55],$Vk1=[2,12,17,20,24,42,43,44,48,49,54,55,56,60,61,62,65,66,95],$Vl1=[15,16,17,21,23,78,79],$Vm1=[2,147],$Vn1=[78,81],$Vo1=[1,250],$Vp1=[1,249],$Vq1=[17,23,78],$Vr1=[12,13,65,66,116,122,123,124,125,126,128],$Vs1=[15,17,18,23,78,81,107,108],$Vt1=[15,17,18,23,78,81,107,108,109,110,111,112,113,114],$Vu1=[15,17,18,23,78,81,107,108,109,110,111,112,113,114,115,116],$Vv1=[15,17,18,23,78,81,107,108,109,110,111,112,113,114,115,116,117,118],$Vw1=[1,283],$Vx1=[17,55],$Vy1=[1,308],$Vz1=[2,149],$VA1=[1,369];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CONT":4,"EOF":5,"LISTA_CONTENIDO":6,"CONTENIDO":7,"LISTA_CONTENIDO_PRIM":8,"FUNCIONES":9,"ESTRUCTURAS_DE_CONTROL":10,"R_Funcion":11,"Identificador":12,"S_ParentesisAbre":13,"PARAM":14,"S_ParentesisCierra":15,"S_LlaveAbre":16,"S_LlaveCierra":17,"S_DosPuntos":18,"TIPOS_DE_DATO":19,"R_Let":20,"S_Igual":21,"TIPAR_FUNCION":22,"S_PuntoComa":23,"R_Const":24,"EDD":25,"LISTADO_ESTRUCTURAS":26,"CONT_ESTRUCTURAS_CONTROL":27,"VARIABLES":28,"ASIGNACION":29,"LISTADO_IF":30,"ELSE":31,"SWITCH":32,"IMPRIMIR":33,"WHILE":34,"DO_WHILE":35,"FOR":36,"FOR_OF":37,"FOR_IN":38,"SENTENCIAS_TRANSFERENCIA":39,"LLAMADA_FUNC":40,"TYPES":41,"R_Break":42,"R_Continue":43,"R_Return":44,"EXPRESION_G":45,"R_Else":46,"IF":47,"R_If":48,"R_Switch":49,"CASE":50,"DEFINIR_DEFAULT":51,"LISTA_CASE":52,"DEFINIR_CASE":53,"R_Case":54,"R_Default":55,"R_Console":56,"S_Punto":57,"R_Log":58,"FUNC":59,"R_While":60,"R_Do":61,"R_For":62,"CONT_FOR":63,"FIN_FOR":64,"OP_Incremento":65,"OP_Decremento":66,"IdentificadorG":67,"CONT_FOR_IN":68,"R_In":69,"CONT_FOR_OF":70,"R_Of":71,"ATRIBUTOS":72,"LISTA_DE_ASIGNACIONES":73,"COMPLETAR_ASIGNACION":74,"R_Push":75,"LISTADO_ASIGNACION":76,"CONTENIDO_ASIGNACION":77,"S_Coma":78,"S_CorcheteAbre":79,"CONT_ASIG_ARRAY":80,"S_CorcheteCierra":81,"LISTA_DECLARACION_TYPES":82,"LISTA_ASIGN_ARRAY":83,"CONT_ARRAY_ASIGN_VV":84,"LISTADO_VAR":85,"CONT_VAR":86,"CONTENIDO_ARRAY":87,"LISTADO_ARRAY":88,"CONT_ARR":89,"PARAMETROS_FUNC":90,"R_Pop":91,"LISTA_PARAMETROS":92,"PARAMETROS":93,"S_Interrogacion":94,"T_Type":95,"LISTA_TYPES":96,"FIN_TYPES":97,"SEPARADOR":98,"CONTENIDO_TYPES":99,"SEPARADOR_DECLARACION_TYPES":100,"CONTENIDO_DECLARACION_TYPES":101,"T_Number":102,"T_Boolean":103,"T_String":104,"T_Void":105,"CONT_ATRIBUTOS":106,"LOG_Concatenar":107,"LOG_OR":108,"REL_IgualIgual":109,"REL_MayorIgualQue":110,"REL_MayorQue":111,"REL_MenorIgualQue":112,"REL_MenorQue":113,"REL_Distinto":114,"OP_Mas":115,"OP_Menos":116,"OP_Multiplicacion":117,"OP_Division":118,"OP_Exponenciacion":119,"OP_Modulo":120,"CONTENIDO_EXPRESION":121,"LOG_Not":122,"Entero":123,"Decimal":124,"R_True":125,"R_False":126,"OPCIONAL":127,"Cadena":128,"R_Length":129,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"R_Funcion",12:"Identificador",13:"S_ParentesisAbre",15:"S_ParentesisCierra",16:"S_LlaveAbre",17:"S_LlaveCierra",18:"S_DosPuntos",20:"R_Let",21:"S_Igual",23:"S_PuntoComa",24:"R_Const",42:"R_Break",43:"R_Continue",44:"R_Return",46:"R_Else",48:"R_If",49:"R_Switch",54:"R_Case",55:"R_Default",56:"R_Console",57:"S_Punto",58:"R_Log",60:"R_While",61:"R_Do",62:"R_For",65:"OP_Incremento",66:"OP_Decremento",67:"IdentificadorG",69:"R_In",71:"R_Of",75:"R_Push",78:"S_Coma",79:"S_CorcheteAbre",81:"S_CorcheteCierra",91:"R_Pop",94:"S_Interrogacion",95:"T_Type",102:"T_Number",103:"T_Boolean",104:"T_String",105:"T_Void",107:"LOG_Concatenar",108:"LOG_OR",109:"REL_IgualIgual",110:"REL_MayorIgualQue",111:"REL_MayorQue",112:"REL_MenorIgualQue",113:"REL_MenorQue",114:"REL_Distinto",115:"OP_Mas",116:"OP_Menos",117:"OP_Multiplicacion",118:"OP_Division",119:"OP_Exponenciacion",120:"OP_Modulo",122:"LOG_Not",123:"Entero",124:"Decimal",125:"R_True",126:"R_False",128:"Cadena",129:"R_Length"},
productions_: [0,[3,2],[4,1],[4,0],[6,2],[8,2],[8,0],[7,1],[7,1],[7,1],[9,8],[9,10],[9,12],[9,12],[25,1],[25,0],[26,2],[26,1],[27,1],[27,1],[10,1],[10,1],[10,2],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[39,2],[39,2],[39,2],[39,3],[30,3],[30,1],[47,7],[31,4],[31,0],[32,8],[50,1],[50,0],[52,2],[52,1],[53,4],[51,3],[51,0],[33,7],[59,1],[59,0],[34,7],[35,9],[36,10],[63,7],[63,5],[63,2],[63,4],[64,3],[64,2],[64,2],[64,2],[64,2],[38,7],[68,4],[68,4],[68,3],[37,7],[70,4],[70,4],[70,3],[29,4],[29,4],[29,4],[29,4],[29,4],[29,7],[74,1],[74,0],[76,2],[76,1],[77,4],[77,3],[77,3],[77,3],[77,3],[73,1],[73,3],[73,3],[80,1],[80,0],[83,3],[83,1],[84,1],[84,3],[84,3],[28,3],[28,3],[85,3],[85,1],[86,1],[86,3],[86,5],[86,3],[86,5],[86,5],[86,9],[86,7],[86,5],[87,1],[87,0],[88,3],[88,1],[89,3],[89,1],[40,5],[40,6],[90,3],[90,1],[90,0],[14,1],[14,0],[92,3],[92,1],[93,3],[93,5],[93,4],[41,6],[96,3],[96,1],[99,3],[99,5],[98,1],[98,1],[97,2],[97,1],[82,3],[82,1],[101,3],[100,1],[100,1],[19,1],[19,1],[19,1],[19,1],[19,1],[22,2],[22,0],[72,3],[72,1],[106,4],[106,1],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,2],[45,2],[45,2],[45,2],[45,2],[45,2],[45,1],[121,1],[121,1],[121,1],[121,1],[121,3],[121,4],[121,3],[121,1],[121,1],[121,3],[121,5],[127,3],[127,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log($$[$0-1]);
break;
case 2:
this.$ =$$[$0];
break;
case 4: case 5:
this.$ = $$[$0];
break;
case 6:

                                                                var pila = eval('$$');
                                                                var valSintetizar = pila[pila.length - 1 ];
                                                                this.$ = valSintetizar;
                                                                
break;
case 7: case 8:
 
                                        var pila = eval('$$');
                                        //console.log(pila);
                                        var anterior = pila[pila.length - 2];  
                                        if(Array.isArray(anterior)){
                                            var temp = anterior.concat($$[$0]);
                                        }else{
                                            var temp  = [$$[$0]];
                                        }
                                        this.$ = temp;
                                        
break;
case 9: case 19:
this.$ ='';console.log({ Tipo_Error  : ' Error_Sintactico ', Error  : yytext , Fila  : this._$.first_line , Columna  :  this._$.first_column });
break;
case 10:
var json  = { tipo: "funcion" , contenido : [{tipo : "identificador", contenido : $$[$0-6]},{tipo : "parametros", contenido : [$$[$0-4]]},{tipo : "instrucciones", contenido : $$[$0-1]}]};this.$ = json;
break;
case 11:
var json = {tipo : "funcion" ,contenido : [{tipo : "identificador", contenido : $$[$0-8]},{tipo : "parametros", contenido : [$$[$0-6]]},{tipo : "tipoDato", contenido : $$[$0-3]},{tipo : "instrucciones", contenido : $$[$0-1]}] }; this.$ = json;
break;
case 39: case 50:
this.$ = $$[$0-6]+$$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0];
break;
case 55:
 this.$ = $$[$0-9] + $$[$0-8] + $$[$0-7] + $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 60: case 154: case 155: case 156: case 157: case 158: case 159: case 160: case 161: case 162: case 163: case 164: case 165: case 166: case 167: case 179: case 181: case 186:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 117:
this.$ = $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 118:
this.$ = $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1];
break;
case 119:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 121:
this.$='';
break;
case 124:
this.$ = $$[$0-2] + $$[$0-1]
break;
case 125:
this.$=$$[$0]
break;
case 126:
var json = {tipo : "identificador" , contenido : $$[$0-2]} ; this.$ = json;
break;
case 127: case 128:
var json = {tipo : "" , contenido :} ; this.$ = json;
break;
case 168: case 169: case 172: case 173:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 170: case 171:
 this.$ = $$[$0-1] + $$[$0];
break;
case 180:
 this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
}
},
table: [{2:$V0,3:1,4:2,5:$V1,6:3,7:4,9:5,10:6,11:$V2,12:$V3,20:$V4,24:$V5,28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:$V6,43:$V7,44:$V8,47:27,48:$V9,49:$Va,56:$Vb,60:$Vc,61:$Vd,62:$Ve,65:$Vf,66:$Vg,72:24,95:$Vh,106:38},{1:[3]},{5:[1,40]},o($Vi,[2,2]),o($Vi,$Vj,{9:5,10:6,28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,72:24,47:27,106:38,8:41,7:42,2:$V0,11:$V2,12:$V3,20:$V4,24:$V5,42:$V6,43:$V7,44:$V8,48:$V9,49:$Va,56:$Vb,60:$Vc,61:$Vd,62:$Ve,65:$Vf,66:$Vg,95:$Vh}),o($Vk,[2,7]),o($Vk,[2,8]),o($Vk,[2,9]),{12:[1,43]},{12:[1,44],85:45,86:46},{12:[1,47],85:48,86:46},o($Vl,[2,20]),o($Vl,[2,21]),o($Vl,[2,41],{31:49,46:[1,50]}),o($Vl,[2,23]),o($Vl,[2,24]),o($Vl,[2,25]),o($Vl,[2,26]),o($Vl,[2,27]),o($Vl,[2,28]),o($Vl,[2,29]),o($Vl,[2,30]),o($Vl,[2,31]),o($Vl,[2,32]),{21:[1,51],57:[1,54],65:[1,52],66:[1,53]},{12:$Vm,72:55,106:38},{12:$Vm,72:57,106:38},o($Vn,[2,38]),{13:[1,58]},{57:[1,59]},{13:[1,60]},{16:[1,61]},{13:[1,62]},{23:[1,63]},{23:[1,64]},{12:$Vo,13:$Vp,23:[1,65],45:66,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},o([21,57,65,66],$Vz,{13:[1,80],79:$VA}),{12:[1,82]},o($VB,[2,151]),{13:[1,83]},{1:[2,1]},o($Vi,[2,4]),o($Vi,$Vj,{9:5,10:6,28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,72:24,47:27,106:38,7:42,8:84,2:$V0,11:$V2,12:$V3,20:$V4,24:$V5,42:$V6,43:$V7,44:$V8,48:$V9,49:$Va,56:$Vb,60:$Vc,61:$Vd,62:$Ve,65:$Vf,66:$Vg,95:$Vh}),{13:[1,85]},o($VC,$VD,{18:$VE,21:[1,86]}),{23:[1,88],78:$VF},o($VC,[2,101]),o($VC,$VD,{18:$VE,21:[1,90]}),{23:[1,91],78:$VF},o($Vl,[2,22]),{16:[1,93],47:92,48:$V9},{12:$Vo,13:$Vp,16:$VG,45:95,65:$Vq,66:$Vr,72:79,73:94,79:$VH,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{23:$VI,74:98,76:99,77:100,78:$VJ},{23:$VI,74:102,76:99,77:100,78:$VJ},{12:$Vm,75:[1,103],91:[1,104],106:105},{23:$VI,57:$VK,74:106,76:99,77:100,78:$VJ},o($VB,$Vz,{79:$VA}),{23:$VI,57:$VK,74:108,76:99,77:100,78:$VJ},{12:$Vo,13:$Vp,45:109,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{58:[1,110]},{12:$Vo,13:$Vp,45:111,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{2:$VL,10:115,12:$V3,17:$VM,20:$VN,24:$VO,25:112,26:113,27:114,28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:$V6,43:$V7,44:$V8,47:27,48:$V9,49:$Va,56:$Vb,60:$Vc,61:$Vd,62:$Ve,65:$Vf,66:$Vg,72:24,95:$Vh,106:38},{12:[1,123],20:[1,122],24:[1,124],63:119,68:121,70:120},o($Vl,[2,33]),o($Vl,[2,34]),o($Vl,[2,35]),{23:[1,125],107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01},o($V11,[2,174],{65:[1,141],66:[1,140]}),{12:$Vo,13:$Vp,72:79,106:38,121:142,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{12:$Vo,13:$Vp,72:79,106:38,121:143,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{12:$Vo,13:$Vp,72:79,106:38,121:144,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{12:$Vo,13:$Vp,72:79,106:38,121:145,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},o($V21,[2,175]),o($V21,[2,176]),o($V21,[2,177]),o($V21,[2,178]),o([15,17,18,23,57,65,66,78,81,107,108,109,110,111,112,113,114,115,116,117,118,119,120],$Vz,{13:[1,146],79:$VA}),{12:$Vo,13:$Vp,45:147,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},o($V21,[2,182]),o($V21,[2,183],{57:[1,148]}),o($V31,[2,121],{106:38,121:67,72:79,90:149,45:150,12:$Vo,13:$Vp,65:$Vq,66:$Vr,116:$Vs,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy}),{12:$Vo,13:$Vp,45:151,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{21:[1,152]},{12:$Vo,13:$Vp,45:153,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},o($Vi,[2,5]),{12:$V41,14:154,15:$V51,92:155,93:156},{11:[1,158],12:$Vo,13:$Vp,16:$V61,45:159,65:$Vq,66:$Vr,72:79,79:$V71,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{12:$V81,19:162,102:$V91,103:$Va1,104:$Vb1,105:$Vc1},o($Vl,[2,98]),{12:$Vd1,86:168},{11:[1,170],12:$Vo,13:$Vp,16:$V61,45:159,65:$Vq,66:$Vr,72:79,79:$V71,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},o($Vl,[2,99]),o($Vn,[2,37]),{2:$VL,10:115,12:$V3,17:$VM,20:$VN,24:$VO,25:171,26:113,27:114,28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:$V6,43:$V7,44:$V8,47:27,48:$V9,49:$Va,56:$Vb,60:$Vc,61:$Vd,62:$Ve,65:$Vf,66:$Vg,72:24,95:$Vh,106:38},{23:[1,172]},o($Ve1,[2,88],{107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01}),{12:$Vo,13:$Vp,16:$Vf1,45:176,65:$Vq,66:$Vr,72:79,79:$Vg1,80:173,81:$Vh1,83:174,84:175,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{12:$Vi1,82:179,101:180},{23:[1,182]},{23:[2,79],77:183,78:$VJ},o($VC,[2,82]),{12:[1,184],65:[1,185],66:[1,186]},{23:[1,187]},{13:[1,188]},{13:[1,189]},o($VB,[2,150]),{23:[1,190]},{12:$Vm,106:105},{23:[1,191]},{15:[1,192],107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01},{13:[1,193]},{15:[1,194],107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01},{17:[1,195]},o($Vj1,[2,14],{28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,72:24,47:27,106:38,10:115,27:196,2:$VL,12:$V3,20:$VN,24:$VO,42:$V6,43:$V7,44:$V8,48:$V9,49:$Va,56:$Vb,60:$Vc,61:$Vd,62:$Ve,65:$Vf,66:$Vg,95:$Vh}),o($Vk1,[2,17]),o($Vk1,[2,18]),o($Vk1,[2,19]),{12:$Vd1,85:45,86:46},{12:$Vd1,85:48,86:46},{12:$Vo,13:$Vp,45:197,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{15:[1,198]},{15:[1,199]},{12:[1,200]},{21:[1,202],23:[1,201],69:[1,204],71:[1,203]},{12:[1,205]},o($Vl,[2,36]),{12:$Vo,13:$Vp,45:206,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{12:$Vo,13:$Vp,45:207,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{12:$Vo,13:$Vp,45:208,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{12:$Vo,13:$Vp,45:209,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{12:$Vo,13:$Vp,45:210,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{12:$Vo,13:$Vp,45:211,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{12:$Vo,13:$Vp,45:212,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{12:$Vo,13:$Vp,45:213,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{12:$Vo,13:$Vp,45:214,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{12:$Vo,13:$Vp,45:215,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{12:$Vo,13:$Vp,45:216,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{12:$Vo,13:$Vp,45:217,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{12:$Vo,13:$Vp,45:218,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{12:$Vo,13:$Vp,45:219,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},o($V11,[2,168]),o($V11,[2,169]),o($V11,[2,170]),o($V11,[2,171]),o($V11,[2,172]),o($V11,[2,173]),{12:$Vo,13:$Vp,15:[1,220],45:222,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:221,128:$Vy},{15:[1,223],107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01},{12:$Vm,91:[1,225],106:105,129:[1,224]},{15:[1,226],78:[1,227]},o($V31,[2,120],{107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01}),{81:[1,228],107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01},{16:[1,229]},{15:[1,230],107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01},{15:[1,231]},{15:[2,122],78:[1,232]},o($V31,[2,125]),{18:[1,233],94:[1,234]},{13:[1,235]},o($VC,[2,105],{107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01}),{12:$Vo,13:$Vp,16:$Vf1,45:176,65:$Vq,66:$Vr,72:79,79:$Vg1,80:236,81:$Vh1,83:174,84:175,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{12:$Vi1,82:237,101:180},o($VC,[2,103],{21:[1,238],79:[1,239]}),o($Vl1,[2,143]),o($Vl1,[2,144]),o($Vl1,[2,145]),o($Vl1,[2,146]),o([15,16,21,23,78,79],$Vm1),o($VC,[2,100]),o($VC,$VD,{18:$VE,21:[1,240]}),{13:[1,241]},{17:[1,242]},o($Vl,[2,73]),{81:[1,243]},{78:[1,244],81:[2,91]},o($Vn1,[2,94]),o($Vn1,[2,95],{107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01}),{12:$Vo,13:$Vp,16:$Vf1,45:176,65:$Vq,66:$Vr,72:79,79:$Vg1,80:245,81:$Vh1,83:174,84:175,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{12:$Vi1,82:246,101:180},{17:[1,247],23:$Vo1,78:$Vp1,100:248},o($Vq1,[2,139]),{18:[1,251]},o($Vl,[2,74]),o($VC,[2,81]),{21:[1,252],65:[1,253],66:[1,254]},{12:[1,255]},{12:[1,256]},o($Vl,[2,76]),{12:$Vo,13:$Vp,16:$VG,45:95,65:$Vq,66:$Vr,72:79,73:257,79:$VH,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{15:[1,258]},o($Vl,[2,75]),o($Vl,[2,77]),{16:[1,259]},{12:$Vo,13:$Vp,15:[2,52],45:261,59:260,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{16:[1,262]},{60:[1,263]},o($Vk1,[2,16]),{23:[1,264],107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01},{16:[1,265]},{16:[1,266]},{18:[1,267],21:[1,268],69:[1,270],71:[1,269]},o($Vr1,[2,58]),{12:$Vo,13:$Vp,45:271,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{12:[1,272]},{12:[1,273]},{69:[1,275],71:[1,274]},o($Vs1,[2,154],{109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01}),o($Vs1,[2,155],{109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01}),o($Vt1,[2,156],{115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01}),o($Vt1,[2,157],{115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01}),o($Vt1,[2,158],{115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01}),o($Vt1,[2,159],{115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01}),o($Vt1,[2,160],{115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01}),o($Vt1,[2,161],{115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01}),o($Vu1,[2,162],{117:$VZ,118:$V_,119:$V$,120:$V01}),o($Vu1,[2,163],{117:$VZ,118:$V_,119:$V$,120:$V01}),o($Vv1,[2,164],{119:$V$,120:$V01}),o($Vv1,[2,165],{119:$V$,120:$V01}),o($V11,[2,166]),o($V11,[2,167]),o($V21,[2,179]),{15:[1,276],78:[1,277]},o($V31,[2,187],{107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01}),o($V21,[2,181]),o($V21,[2,184]),{13:[1,278]},{23:[1,279]},{12:$Vo,13:$Vp,45:280,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},o($VB,[2,152]),{12:$Vw1,96:281,99:282},{16:[1,284]},{16:[1,285],18:[1,286]},{12:$V41,93:287},{12:$V81,19:288,102:$V91,103:$Va1,104:$Vb1,105:$Vc1},{18:[1,289]},{12:$V41,14:290,15:$V51,92:155,93:156},{81:[1,291]},{17:[1,292],23:$Vo1,78:$Vp1,100:248},{12:$Vo,13:$Vp,16:[1,294],45:293,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{81:[1,295]},{12:$Vo,13:$Vp,16:$V61,45:159,65:$Vq,66:$Vr,72:79,79:$V71,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{12:$V41,14:296,15:$V51,92:155,93:156},o($Vl,[2,40]),o($Ve1,[2,89]),{12:$Vo,13:$Vp,16:$Vf1,45:176,65:$Vq,66:$Vr,72:79,79:$Vg1,84:297,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{81:[1,298]},{17:[1,299],23:$Vo1,78:$Vp1,100:248},o($Ve1,[2,90]),{12:$Vi1,101:300},{12:[2,141]},{12:[2,142]},{12:$Vo,13:$Vp,16:$VG,45:95,65:$Vq,66:$Vr,72:79,73:301,79:$VH,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{12:$Vo,13:$Vp,45:302,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},o($VC,[2,84]),o($VC,[2,86]),o($VC,[2,85]),o($VC,[2,87]),{15:[1,303]},{23:[1,304]},o($Vx1,[2,44],{50:305,52:306,53:307,54:$Vy1}),{15:[1,309]},{15:[2,51],107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01},{2:$VL,10:115,12:$V3,17:$VM,20:$VN,24:$VO,25:310,26:113,27:114,28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:$V6,43:$V7,44:$V8,47:27,48:$V9,49:$Va,56:$Vb,60:$Vc,61:$Vd,62:$Ve,65:$Vf,66:$Vg,72:24,95:$Vh,106:38},{13:[1,311]},{12:[1,313],64:312,65:[1,314],66:[1,315]},{2:$VL,10:115,12:$V3,17:$VM,20:$VN,24:$VO,25:316,26:113,27:114,28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:$V6,43:$V7,44:$V8,47:27,48:$V9,49:$Va,56:$Vb,60:$Vc,61:$Vd,62:$Ve,65:$Vf,66:$Vg,72:24,95:$Vh,106:38},{2:$VL,10:115,12:$V3,17:$VM,20:$VN,24:$VO,25:317,26:113,27:114,28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:$V6,43:$V7,44:$V8,47:27,48:$V9,49:$Va,56:$Vb,60:$Vc,61:$Vd,62:$Ve,65:$Vf,66:$Vg,72:24,95:$Vh,106:38},{12:$V81,19:318,102:$V91,103:$Va1,104:$Vb1,105:$Vc1},{12:$Vo,13:$Vp,45:319,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{12:[1,320]},{12:[1,321]},{23:[1,322],107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01},{15:[2,72]},{15:[2,68]},{12:[1,323]},{12:[1,324]},o($V21,[2,180]),{12:$Vo,13:$Vp,45:325,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{15:[1,326]},o($Vl,[2,117]),o($V31,[2,119],{107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01}),{17:[1,329],23:[1,331],78:[1,330],97:327,98:328},o($Vq1,[2,131]),{18:[1,332]},{2:$VL,10:115,12:$V3,17:$VM,20:$VN,24:$VO,25:333,26:113,27:114,28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:$V6,43:$V7,44:$V8,47:27,48:$V9,49:$Va,56:$Vb,60:$Vc,61:$Vd,62:$Ve,65:$Vf,66:$Vg,72:24,95:$Vh,106:38},{2:$V0,4:334,6:3,7:4,9:5,10:6,11:$V2,12:$V3,17:$V1,20:$V4,24:$V5,28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:$V6,43:$V7,44:$V8,47:27,48:$V9,49:$Va,56:$Vb,60:$Vc,61:$Vd,62:$Ve,65:$Vf,66:$Vg,72:24,95:$Vh,106:38},{12:$V81,19:335,102:$V91,103:$Va1,104:$Vb1,105:$Vc1},o($V31,[2,124]),o($V31,[2,126],{21:[1,336]}),{12:$V81,19:337,102:$V91,103:$Va1,104:$Vb1,105:$Vc1},{15:[1,338]},o($VC,[2,106]),o($VC,[2,110]),o($VC,[2,104],{107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01}),{12:$Vi1,82:339,101:180},o($VC,[2,107],{21:[1,340]}),{15:[1,341]},o($Vn1,[2,93]),o($Vn1,[2,96]),o($Vn1,[2,97]),o($Vq1,[2,138]),o($Vq1,[2,140]),o($VC,[2,83],{107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01}),{23:[1,342]},o($Vl,[2,118]),{17:[2,49],51:343,55:[1,344]},o($Vx1,[2,43],{53:345,54:$Vy1}),o($Vj1,[2,46]),{12:$Vo,13:$Vp,45:346,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{23:[1,347]},{17:[1,348]},{12:$Vo,13:$Vp,45:349,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{15:[1,350]},{21:[1,351],65:[1,352],66:[1,353]},{12:[1,354]},{67:[1,355]},{17:[1,356]},{17:[1,357]},{21:[1,358]},{23:[1,359],107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01},{15:[2,71]},{15:[2,67]},o($Vr1,[2,59]),{15:[2,70]},{15:[2,66]},o($V31,[2,186],{107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01}),o($V21,[2,185]),o($Vl,[2,129]),{12:$Vw1,99:360},o($Vl,[2,137],{23:[1,361]}),{12:[2,134]},{12:[2,135]},{12:[1,363],19:362,102:$V91,103:$Va1,104:$Vb1,105:$Vc1},{17:[1,364]},{17:[1,365]},{16:[1,366]},{12:$Vo,13:$Vp,45:367,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},o($V31,[2,128]),{16:$Vz1,18:$VA1,22:368},{17:[1,370],23:$Vo1,78:$Vp1,100:248},{79:[1,371]},{16:$Vz1,18:$VA1,22:372},o($Vl,[2,78]),{17:[1,373]},{18:[1,374]},o($Vj1,[2,45]),{18:[1,375],107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01},o($Vl,[2,50]),o($Vl,[2,53]),{15:[1,376],107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01},{16:[1,377]},{12:$Vo,13:$Vp,45:378,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{15:[2,61]},{15:[2,63]},{15:[2,62]},{15:[2,64]},o($Vl,[2,69]),o($Vl,[2,65]),{12:$Vo,13:$Vp,45:379,65:$Vq,66:$Vr,72:79,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},o($Vr1,[2,57]),o($Vq1,[2,130]),o($Vl,[2,136]),o($Vq1,[2,132]),o($Vq1,$Vm1,{79:[1,380]}),o($Vn,[2,39]),o($Vk,[2,10]),{2:$V0,4:381,6:3,7:4,9:5,10:6,11:$V2,12:$V3,17:$V1,20:$V4,24:$V5,28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:$V6,43:$V7,44:$V8,47:27,48:$V9,49:$Va,56:$Vb,60:$Vc,61:$Vd,62:$Ve,65:$Vf,66:$Vg,72:24,95:$Vh,106:38},o($V31,[2,127],{107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01}),{16:[1,382]},{12:$V81,19:383,102:$V91,103:$Va1,104:$Vb1,105:$Vc1},o($VC,[2,109]),{12:$Vo,13:$Vp,16:$Vf1,45:176,65:$Vq,66:$Vr,72:79,79:$Vg1,80:384,81:$Vh1,83:174,84:175,106:38,116:$Vs,121:67,122:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,128:$Vy},{16:[1,385]},o($Vl,[2,42]),{2:$VL,10:115,12:$V3,17:$VM,20:$VN,24:$VO,25:386,26:113,27:114,28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:$V6,43:$V7,44:$V8,47:27,48:$V9,49:$Va,56:$Vb,60:$Vc,61:$Vd,62:$Ve,65:$Vf,66:$Vg,72:24,95:$Vh,106:38},o($Vj1,$VM,{28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,72:24,47:27,106:38,26:113,27:114,10:115,25:387,2:$VL,12:$V3,20:$VN,24:$VO,42:$V6,43:$V7,44:$V8,48:$V9,49:$Va,56:$Vb,60:$Vc,61:$Vd,62:$Ve,65:$Vf,66:$Vg,95:$Vh}),{23:[1,388]},{2:$VL,10:115,12:$V3,17:$VM,20:$VN,24:$VO,25:389,26:113,27:114,28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:$V6,43:$V7,44:$V8,47:27,48:$V9,49:$Va,56:$Vb,60:$Vc,61:$Vd,62:$Ve,65:$Vf,66:$Vg,72:24,95:$Vh,106:38},{15:[2,60],107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01},{23:[1,390],107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,118:$V_,119:$V$,120:$V01},{81:[1,391]},{17:[1,392]},{2:$V0,4:393,6:3,7:4,9:5,10:6,11:$V2,12:$V3,17:$V1,20:$V4,24:$V5,28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:$V6,43:$V7,44:$V8,47:27,48:$V9,49:$Va,56:$Vb,60:$Vc,61:$Vd,62:$Ve,65:$Vf,66:$Vg,72:24,95:$Vh,106:38},{16:[2,148]},{81:[1,394]},{2:$V0,4:395,6:3,7:4,9:5,10:6,11:$V2,12:$V3,17:$V1,20:$V4,24:$V5,28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:$V6,43:$V7,44:$V8,47:27,48:$V9,49:$Va,56:$Vb,60:$Vc,61:$Vd,62:$Ve,65:$Vf,66:$Vg,72:24,95:$Vh,106:38},{17:[2,48]},o($Vj1,[2,47]),o($Vl,[2,54]),{17:[1,396]},o($Vr1,[2,56]),o($Vq1,[2,133]),o($Vk,[2,11]),{17:[1,397]},o($VC,[2,108]),{17:[1,398]},o($Vl,[2,55]),{23:[1,399]},{23:[1,400]},o($Vk,[2,12]),o($Vk,[2,13])],
defaultActions: {40:[2,1],249:[2,141],250:[2,142],272:[2,72],273:[2,68],320:[2,71],321:[2,67],323:[2,70],324:[2,66],330:[2,134],331:[2,135],352:[2,61],353:[2,63],354:[2,62],355:[2,64],383:[2,148],386:[2,48]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"yylineno":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* salta espacios en blanco */
break;
case 1:/* comentario simple*/
break;
case 2:/*comentario multilinea*/
break;
case 3:  return 128; 
break;
case 4:  return 128; 
break;
case 5:  return 128; 
break;
case 6:  return 102;  
break;
case 7:  return 103; 
break;
case 8:  return 104;  
break;
case 9:  return 95;    
break;
case 10:  return 105;    
break;
case 11:  return 20;   
break;
case 12:  return 24; 
break;
case 13:  return 'R_Array'; 
break;
case 14:  return 75;  
break;
case 15:  return 91;   
break;
case 16:  return 129;
break;
case 17:  return 11;
break;
case 18:return 48;
break;
case 19:return 46;
break;
case 20:return 49;
break;
case 21:return 54;
break;
case 22:return 55;
break;
case 23:return 62;
break;
case 24:return 69;
break;
case 25:return 71;
break;
case 26:return 60;
break;
case 27:return 61;
break;
case 28:return 42;
break;
case 29:return 43;
break;
case 30:return 44;
break;
case 31:return 56;
break;
case 32:return 58;
break;
case 33:return 125;
break;
case 34:return 126;
break;
case 35:return 'R_Undefined';
break;
case 36:return 65;
break;
case 37:return 66;
break;
case 38:return 115;
break;
case 39:return 116;
break;
case 40:return 119;
break;
case 41:return 117;
break;
case 42:return 118;
break;
case 43:return 120;
break;
case 44:return 112;
break;
case 45:return 110;
break;
case 46:return 109;
break;
case 47:return 21;
break;
case 48:return 114;
break;
case 49:return 113;
break;
case 50:return 111;
break;
case 51:return 122;
break;
case 52:return 107;
break;
case 53:return 108;
break;
case 54:return 18;
break;
case 55:return 23;
break;
case 56:return 16;
break;
case 57:return 17;
break;
case 58:return 13;
break;
case 59:return 15;
break;
case 60:return 57;
break;
case 61:return 'S_ComillaSimple';
break;
case 62:return 78;
break;
case 63:return 'S_ComillaDoble';
break;
case 64:return 94;
break;
case 65:return 79;
break;
case 66:return 81;
break;
case 67:return 124;
break;
case 68:return 123;
break;
case 69:return 12;
break;
case 70:  return 5; 
break;
case 71:console.error("error lexico: " + yy_.yytext)
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[\"][^\\\"]*([\\][\\\"ntr][^\\\"]*)*[\"])/,/^(?:[\'][^\\\']*([\\][\\\'ntr][^\\\']*)*[\'])/,/^(?:[\`][^\\\`]*([\\][\\\`ntr][^\\\`]*)*[\`])/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:string\b)/,/^(?:type\b)/,/^(?:void\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:Array\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:undefined\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?::)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:\\')/,/^(?:,)/,/^(?:")/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Traduccion;
exports.Parser = Traduccion.Parser;
exports.parse = function () { return Traduccion.parse.apply(Traduccion, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}